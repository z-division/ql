// Code generated by goyacc -o ql.go -v ql.output -p ql ql.y. DO NOT EDIT.

//line ql.y:2
package parser

import __yyfmt__ "fmt"

//line ql.y:2

//line ql.y:5
type qlSymType struct {
	yys int
	*Token

	// scoped control flow expressions
	*ScopeDef
	*ExprBlock
	*ConditionalExpr
	*ForExpr

	ControlFlowExpr
	Expr

	Declaration
	Declarations []Declaration

	Statements []ControlFlowExpr
	Arguments  []*Argument
	Parameters []*Parameter

	TypeSpec
}

const LEX_ERROR = 57346
const BLOCK_COMMENT_END = 57347
const COMMENT = 57348
const L_BRACE = 57349
const R_BRACE = 57350
const L_PAREN = 57351
const R_PAREN = 57352
const L_BRACKET = 57353
const R_BRACKET = 57354
const ASSIGN = 57355
const COLON = 57356
const COMMA = 57357
const DOT = 57358
const STAR_STAR = 57359
const AT = 57360
const SEMICOLON = 57361
const NEWLINE = 57362
const VAR = 57363
const CONST = 57364
const IF = 57365
const ELSE = 57366
const FOR = 57367
const RETURN = 57368
const TYPE = 57369
const FUNC = 57370
const BOOL_TYPE = 57371
const INT_TYPE = 57372
const UINT_TYPE = 57373
const FLOAT_TYPE = 57374
const BYTE_TYPE = 57375
const STRING_TYPE = 57376
const ITER_TYPE = 57377
const RECORD_TYPE = 57378
const OR = 57379
const AND = 57380
const NOT = 57381
const LT = 57382
const GT = 57383
const EQ = 57384
const NE = 57385
const LE = 57386
const GE = 57387
const BITWISE_OR = 57388
const BITWISE_AND = 57389
const XOR = 57390
const L_SHIFT = 57391
const R_SHIFT = 57392
const ADD = 57393
const SUB = 57394
const MUL = 57395
const DIV = 57396
const MOD = 57397
const UNARY = 57398
const IDENT = 57399
const BYTE_LITERAL = 57400
const STRING_LITERAL = 57401
const INT_LITERAL = 57402
const FLOAT_LITERAL = 57403
const BOOL_LITERAL = 57404
const NOOP = 57405

var qlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"BLOCK_COMMENT_END",
	"COMMENT",
	"L_BRACE",
	"R_BRACE",
	"L_PAREN",
	"R_PAREN",
	"L_BRACKET",
	"R_BRACKET",
	"ASSIGN",
	"COLON",
	"COMMA",
	"DOT",
	"STAR_STAR",
	"AT",
	"SEMICOLON",
	"NEWLINE",
	"VAR",
	"CONST",
	"IF",
	"ELSE",
	"FOR",
	"RETURN",
	"TYPE",
	"FUNC",
	"BOOL_TYPE",
	"INT_TYPE",
	"UINT_TYPE",
	"FLOAT_TYPE",
	"BYTE_TYPE",
	"STRING_TYPE",
	"ITER_TYPE",
	"RECORD_TYPE",
	"OR",
	"AND",
	"NOT",
	"LT",
	"GT",
	"EQ",
	"NE",
	"LE",
	"GE",
	"BITWISE_OR",
	"BITWISE_AND",
	"XOR",
	"L_SHIFT",
	"R_SHIFT",
	"ADD",
	"SUB",
	"MUL",
	"DIV",
	"MOD",
	"UNARY",
	"IDENT",
	"BYTE_LITERAL",
	"STRING_LITERAL",
	"INT_LITERAL",
	"FLOAT_LITERAL",
	"BOOL_LITERAL",
	"NOOP",
}
var qlStatenames = [...]string{}

const qlEofCode = 1
const qlErrCode = 2
const qlInitialStackSize = 16

//line ql.y:887

//line yacctab:1
var qlExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 43,
	10, 80,
	-2, 30,
	-1, 80,
	10, 80,
	-2, 30,
	-1, 89,
	10, 80,
	-2, 30,
	-1, 93,
	8, 18,
	-2, 30,
	-1, 129,
	8, 19,
	-2, 30,
}

const qlPrivate = 57344

const qlLast = 514

var qlAct = [...]int{

	37, 136, 90, 131, 91, 130, 45, 53, 86, 167,
	173, 84, 70, 71, 72, 73, 74, 75, 76, 77,
	78, 44, 72, 73, 74, 75, 76, 77, 78, 36,
	99, 158, 15, 152, 15, 121, 15, 76, 77, 78,
	81, 82, 102, 35, 87, 74, 75, 76, 77, 78,
	12, 15, 11, 15, 10, 32, 96, 15, 33, 184,
	174, 100, 103, 104, 105, 106, 107, 108, 109, 110,
	111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	15, 87, 133, 134, 93, 83, 5, 13, 8, 93,
	87, 57, 122, 6, 7, 144, 145, 186, 93, 146,
	28, 127, 30, 125, 147, 94, 20, 21, 22, 23,
	24, 25, 18, 19, 94, 159, 95, 55, 124, 56,
	83, 126, 80, 60, 15, 151, 83, 153, 98, 79,
	59, 179, 168, 150, 16, 156, 157, 97, 54, 31,
	154, 149, 123, 160, 58, 89, 101, 162, 26, 155,
	93, 4, 164, 166, 1, 9, 3, 2, 138, 137,
	132, 172, 92, 47, 46, 34, 175, 85, 129, 177,
	128, 178, 176, 166, 38, 181, 139, 183, 17, 182,
	15, 185, 42, 0, 43, 0, 0, 188, 189, 187,
	148, 0, 0, 15, 133, 134, 143, 142, 0, 0,
	0, 141, 0, 0, 20, 21, 22, 23, 24, 25,
	18, 19, 0, 0, 40, 20, 21, 22, 23, 24,
	25, 18, 19, 0, 0, 0, 0, 39, 0, 0,
	43, 0, 140, 48, 49, 50, 51, 52, 135, 161,
	0, 43, 0, 16, 0, 0, 170, 0, 0, 0,
	20, 21, 22, 23, 24, 25, 18, 19, 0, 180,
	40, 20, 21, 22, 23, 24, 25, 18, 19, 0,
	0, 40, 0, 39, 0, 43, 0, 0, 41, 48,
	49, 50, 51, 52, 39, 0, 0, 0, 0, 41,
	48, 49, 50, 51, 52, 20, 21, 22, 23, 24,
	25, 18, 19, 0, 0, 40, 0, 0, 0, 0,
	0, 0, 165, 0, 0, 0, 0, 0, 39, 0,
	0, 0, 0, 88, 48, 49, 50, 51, 52, 61,
	62, 0, 63, 64, 65, 66, 67, 68, 69, 70,
	71, 72, 73, 74, 75, 76, 77, 78, 93, 167,
	71, 72, 73, 74, 75, 76, 77, 78, 0, 61,
	62, 163, 63, 64, 65, 66, 67, 68, 69, 70,
	71, 72, 73, 74, 75, 76, 77, 78, 61, 62,
	0, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 62, 0, 63,
	64, 65, 66, 67, 68, 69, 70, 71, 72, 73,
	74, 75, 76, 77, 78, 63, 64, 65, 66, 67,
	68, 69, 70, 71, 72, 73, 74, 75, 76, 77,
	78, 169, 0, 0, 0, 0, 0, 0, 171, 27,
	0, 0, 0, 0, 0, 0, 29, 20, 21, 22,
	23, 24, 25, 18, 19, 20, 21, 22, 23, 24,
	25, 18, 19, 69, 70, 71, 72, 73, 74, 75,
	76, 77, 78, 0, 0, 16, 14, 0, 0, 0,
	0, 0, 0, 16, 0, 20, 21, 22, 23, 24,
	25, 18, 19, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 16,
}
var qlPact = [...]int{

	66, -1000, -1000, 66, -1000, -1000, -3, -5, -7, -1000,
	456, 139, 426, -1000, 186, -1000, -1000, -1000, 128, 15,
	-1000, -1000, -1000, -1000, -1000, -1000, -14, 232, 125, 186,
	-1000, 186, -14, 134, 115, 186, -1000, 322, 113, 232,
	232, 67, -1000, 266, 136, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 91, 232, 124, 116, -11, 77, -15,
	-1000, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, -22,
	266, -1000, 375, -1000, 132, 103, 88, 322, 108, 266,
	-1000, -1000, -1000, 175, 232, 232, -1000, 232, -1000, -1000,
	-1000, 143, 186, 359, 375, 417, 417, 417, 417, 417,
	417, -35, 302, -27, -6, -6, -16, -16, -1000, -1000,
	-1000, -1000, 131, -1000, 266, -24, 232, 130, 141, 175,
	-1000, -1000, 63, -1000, -1000, -1000, -1000, -1000, -1000, -26,
	102, 221, -1000, -1000, 341, 292, -1000, -1000, -1000, -1000,
	88, 322, 119, 322, -1000, -1000, -1000, -1000, 418, 232,
	-1000, -47, 36, 143, -1000, -48, 143, 67, 232, 232,
	118, 186, -1000, 232, 82, 35, -1000, 322, -1000, 232,
	84, -1000, -1000, -1000, 82, -1000, 232, -1000, -1000, -1000,
}
var qlPgo = [...]int{

	0, 182, 178, 176, 1, 174, 0, 170, 168, 11,
	167, 8, 58, 165, 7, 6, 2, 164, 4, 163,
	162, 5, 160, 159, 158, 21, 87, 151, 157, 156,
	154, 3,
}
var qlR1 = [...]int{

	0, 30, 28, 28, 29, 29, 27, 27, 27, 27,
	27, 27, 27, 27, 12, 12, 13, 13, 7, 7,
	8, 8, 31, 31, 21, 21, 22, 22, 22, 22,
	14, 14, 2, 2, 2, 2, 2, 2, 26, 26,
	25, 25, 25, 25, 25, 15, 16, 17, 18, 18,
	18, 18, 18, 18, 19, 20, 20, 3, 3, 23,
	23, 23, 23, 24, 24, 4, 1, 1, 1, 1,
	1, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	9, 9, 9, 9, 10, 10, 11, 11, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 6,
}
var qlR2 = [...]int{

	0, 1, 0, 1, 1, 2, 1, 3, 4, 6,
	7, 4, 5, 6, 0, 1, 2, 4, 0, 1,
	1, 2, 1, 1, 1, 2, 1, 1, 1, 1,
	0, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 1, 4, 2, 3, 2, 3, 4,
	5, 6, 5, 6, 2, 3, 4, 1, 1, 4,
	5, 6, 3, 2, 4, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 4, 1, 1, 1, 3, 4,
	0, 1, 1, 3, 1, 3, 3, 5, 1, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 2,
}
var qlChk = [...]int{

	-1000, -30, -28, -29, -27, 20, 27, 28, 22, -27,
	57, 57, 57, -26, 20, -25, 57, -2, 35, 36,
	29, 30, 31, 32, 33, 34, 9, 13, -26, 20,
	-26, 11, 40, -12, -13, 57, -4, -6, -5, 52,
	39, 57, -1, 9, -25, -15, -17, -19, 58, 59,
	60, 61, 62, -14, 13, -26, -26, -12, 10, 15,
	-26, 37, 38, 40, 41, 42, 43, 44, 45, 46,
	47, 48, 49, 50, 51, 52, 53, 54, 55, 16,
	9, -6, -6, 18, -9, -10, -11, -6, 57, 9,
	-16, -18, -20, 7, 23, 25, -4, 13, 12, 41,
	-16, -26, 57, -6, -6, -6, -6, -6, -6, -6,
	-6, -6, -6, -6, -6, -6, -6, -6, -6, -6,
	-6, 57, -9, 10, 15, 15, 13, -9, -7, -8,
	-21, -31, -22, 19, 20, 63, -4, -23, -24, -3,
	57, 26, 22, 21, -6, -6, -4, -16, -26, 10,
	-11, -6, 57, -6, 10, 8, -21, -31, 57, 13,
	-4, 18, -16, 20, -15, 20, -14, 57, 13, 13,
	-26, 20, -4, 57, 24, -16, -15, -6, -4, 13,
	-26, -4, -18, -16, 24, -4, 13, -18, -16, -4,
}
var qlDef = [...]int{

	2, -2, 1, 3, 4, 6, 0, 0, 0, 5,
	0, 0, 0, 7, 0, 38, 39, 40, 41, 43,
	32, 33, 34, 35, 36, 37, 14, 30, 0, 0,
	8, 0, 14, 0, 15, 0, 11, 65, 88, 30,
	30, 71, 72, -2, 0, 75, 76, 77, 66, 67,
	68, 69, 70, 0, 30, 0, 0, 0, 0, 0,
	16, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 0,
	-2, 107, 108, 31, 0, 81, 82, 84, 71, -2,
	45, 47, 54, -2, 30, 30, 12, 30, 42, 44,
	9, 0, 0, 89, 90, 91, 92, 93, 94, 95,
	96, 97, 98, 99, 100, 101, 102, 103, 104, 105,
	106, 78, 0, 73, 30, 0, 30, 0, 0, -2,
	20, 24, 0, 22, 23, 26, 27, 28, 29, 0,
	71, 30, 57, 58, 0, 30, 13, 10, 17, 79,
	83, 85, 0, 86, 74, 46, 21, 25, 0, 30,
	63, 0, 48, 0, 55, 30, 0, 0, 30, 30,
	0, 0, 62, 30, 0, 49, 56, 87, 59, 30,
	0, 64, 50, 52, 0, 60, 30, 51, 53, 61,
}
var qlTok1 = [...]int{

	1,
}
var qlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63,
}
var qlTok3 = [...]int{
	0,
}

var qlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	qlDebug        = 0
	qlErrorVerbose = false
)

type qlLexer interface {
	Lex(lval *qlSymType) int
	Error(s string)
}

type qlParser interface {
	Parse(qlLexer) int
	Lookahead() int
}

type qlParserImpl struct {
	lval  qlSymType
	stack [qlInitialStackSize]qlSymType
	char  int
}

func (p *qlParserImpl) Lookahead() int {
	return p.char
}

func qlNewParser() qlParser {
	return &qlParserImpl{}
}

const qlFlag = -1000

func qlTokname(c int) string {
	if c >= 1 && c-1 < len(qlToknames) {
		if qlToknames[c-1] != "" {
			return qlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func qlStatname(s int) string {
	if s >= 0 && s < len(qlStatenames) {
		if qlStatenames[s] != "" {
			return qlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func qlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !qlErrorVerbose {
		return "syntax error"
	}

	for _, e := range qlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + qlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := qlPact[state]
	for tok := TOKSTART; tok-1 < len(qlToknames); tok++ {
		if n := base + tok; n >= 0 && n < qlLast && qlChk[qlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if qlDef[state] == -2 {
		i := 0
		for qlExca[i] != -1 || qlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; qlExca[i] >= 0; i += 2 {
			tok := qlExca[i]
			if tok < TOKSTART || qlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if qlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += qlTokname(tok)
	}
	return res
}

func qllex1(lex qlLexer, lval *qlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = qlTok1[0]
		goto out
	}
	if char < len(qlTok1) {
		token = qlTok1[char]
		goto out
	}
	if char >= qlPrivate {
		if char < qlPrivate+len(qlTok2) {
			token = qlTok2[char-qlPrivate]
			goto out
		}
	}
	for i := 0; i < len(qlTok3); i += 2 {
		token = qlTok3[i+0]
		if token == char {
			token = qlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = qlTok2[1] /* unknown char */
	}
	if qlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", qlTokname(token), uint(char))
	}
	return char, token
}

func qlParse(qllex qlLexer) int {
	return qlNewParser().Parse(qllex)
}

func (qlrcvr *qlParserImpl) Parse(qllex qlLexer) int {
	var qln int
	var qlVAL qlSymType
	var qlDollar []qlSymType
	_ = qlDollar // silence set and not used
	qlS := qlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	qlstate := 0
	qlrcvr.char = -1
	qltoken := -1 // qlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		qlstate = -1
		qlrcvr.char = -1
		qltoken = -1
	}()
	qlp := -1
	goto qlstack

ret0:
	return 0

ret1:
	return 1

qlstack:
	/* put a state and value onto the stack */
	if qlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", qlTokname(qltoken), qlStatname(qlstate))
	}

	qlp++
	if qlp >= len(qlS) {
		nyys := make([]qlSymType, len(qlS)*2)
		copy(nyys, qlS)
		qlS = nyys
	}
	qlS[qlp] = qlVAL
	qlS[qlp].yys = qlstate

qlnewstate:
	qln = qlPact[qlstate]
	if qln <= qlFlag {
		goto qldefault /* simple state */
	}
	if qlrcvr.char < 0 {
		qlrcvr.char, qltoken = qllex1(qllex, &qlrcvr.lval)
	}
	qln += qltoken
	if qln < 0 || qln >= qlLast {
		goto qldefault
	}
	qln = qlAct[qln]
	if qlChk[qln] == qltoken { /* valid shift */
		qlrcvr.char = -1
		qltoken = -1
		qlVAL = qlrcvr.lval
		qlstate = qln
		if Errflag > 0 {
			Errflag--
		}
		goto qlstack
	}

qldefault:
	/* default state action */
	qln = qlDef[qlstate]
	if qln == -2 {
		if qlrcvr.char < 0 {
			qlrcvr.char, qltoken = qllex1(qllex, &qlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if qlExca[xi+0] == -1 && qlExca[xi+1] == qlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			qln = qlExca[xi+0]
			if qln < 0 || qln == qltoken {
				break
			}
		}
		qln = qlExca[xi+1]
		if qln < 0 {
			goto ret0
		}
	}
	if qln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			qllex.Error(qlErrorMessage(qlstate, qltoken))
			Nerrs++
			if qlDebug >= 1 {
				__yyfmt__.Printf("%s", qlStatname(qlstate))
				__yyfmt__.Printf(" saw %s\n", qlTokname(qltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for qlp >= 0 {
				qln = qlPact[qlS[qlp].yys] + qlErrCode
				if qln >= 0 && qln < qlLast {
					qlstate = qlAct[qln] /* simulate a shift of "error" */
					if qlChk[qlstate] == qlErrCode {
						goto qlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if qlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", qlS[qlp].yys)
				}
				qlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if qlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", qlTokname(qltoken))
			}
			if qltoken == qlEofCode {
				goto ret1
			}
			qlrcvr.char = -1
			qltoken = -1
			goto qlnewstate /* try again in the same state */
		}
	}

	/* reduction by production qln */
	if qlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", qln, qlStatname(qlstate))
	}

	qlnt := qln
	qlpt := qlp
	_ = qlpt // guard against "declared and not used"

	qlp -= qlR2[qln]
	// qlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if qlp+1 >= len(qlS) {
		nyys := make([]qlSymType, len(qlS)*2)
		copy(nyys, qlS)
		qlS = nyys
	}
	qlVAL = qlS[qlp+1]

	/* consult goto table to find next state */
	qln = qlR1[qln]
	qlg := qlPgo[qln]
	qlj := qlg + qlS[qlp].yys + 1

	if qlj >= qlLast {
		qlstate = qlAct[qlg]
	} else {
		qlstate = qlAct[qlj]
		if qlChk[qlstate] != -qln {
			qlstate = qlAct[qlg]
		}
	}
	// dummy call; replaced with literal code
	switch qlnt {

	case 1:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:108
		{
			nodes := make([]Node, 0, len(qlDollar[1].Declarations))
			for _, node := range qlDollar[1].Declarations {
				nodes = append(nodes, node)
			}
			qllex.(*parseContext).setParsed(nodes)
		}
	case 2:
		qlDollar = qlS[qlpt-0 : qlpt+1]
//line ql.y:118
		{
			qlVAL.Declarations = nil
		}
	case 3:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:121
		{
			qlVAL.Declarations = qlDollar[1].Declarations
		}
	case 4:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:126
		{
			if qlDollar[1].Declaration != nil {
				qlVAL.Declarations = append(qlVAL.Declarations, qlDollar[1].Declaration)
			}
		}
	case 5:
		qlDollar = qlS[qlpt-2 : qlpt+1]
//line ql.y:131
		{
			if qlDollar[2].Declaration != nil {
				qlVAL.Declarations = append(qlDollar[1].Declarations, qlDollar[2].Declaration)
			}
		}
	case 6:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:139
		{
			// do nothing
			qlVAL.Declaration = nil
		}
	case 7:
		qlDollar = qlS[qlpt-3 : qlpt+1]
//line ql.y:143
		{
			qlVAL.Declaration = &TypeDef{
				Location: qlDollar[1].Token.Loc().Merge(qlDollar[3].TypeSpec.Loc()),
				Type:     qlDollar[1].Token,
				Name:     qlDollar[2].Token,
				TypeSpec: qlDollar[3].TypeSpec,
			}
		}
	case 8:
		qlDollar = qlS[qlpt-4 : qlpt+1]
//line ql.y:151
		{
			qlVAL.Declaration = &TypeDef{
				Location: qlDollar[1].Token.Loc().Merge(qlDollar[4].TypeSpec.Loc()),
				Type:     qlDollar[1].Token,
				Name:     qlDollar[2].Token,
				TypeSpec: qlDollar[4].TypeSpec,
			}
		}
	case 9:
		qlDollar = qlS[qlpt-6 : qlpt+1]
//line ql.y:159
		{
			qlVAL.Declaration = &FuncDef{
				Location:   qlDollar[1].Token.Loc().Merge(qlDollar[6].ExprBlock.Loc()),
				Func:       qlDollar[1].Token,
				Name:       qlDollar[2].Token,
				LParen:     qlDollar[3].Token,
				Parameters: qlDollar[4].Parameters,
				RParen:     qlDollar[5].Token,
				Body:       qlDollar[6].ExprBlock,
			}
		}
	case 10:
		qlDollar = qlS[qlpt-7 : qlpt+1]
//line ql.y:170
		{
			qlVAL.Declaration = &FuncDef{
				Location:   qlDollar[1].Token.Loc().Merge(qlDollar[7].ExprBlock.Loc()),
				Func:       qlDollar[1].Token,
				Name:       qlDollar[2].Token,
				LParen:     qlDollar[3].Token,
				Parameters: qlDollar[4].Parameters,
				RParen:     qlDollar[5].Token,
				ReturnType: qlDollar[6].TypeSpec,
				Body:       qlDollar[7].ExprBlock,
			}
		}
	case 11:
		qlDollar = qlS[qlpt-4 : qlpt+1]
//line ql.y:182
		{
			qlVAL.Declaration = &AssignExpr{
				Location:       qlDollar[1].Token.Loc().Merge(qlDollar[4].Expr.Loc()),
				AssignmentType: qlDollar[1].Token,
				Name:           qlDollar[2].Token,
				Assign:         qlDollar[3].Token,
				Expression:     qlDollar[4].Expr,
			}
		}
	case 12:
		qlDollar = qlS[qlpt-5 : qlpt+1]
//line ql.y:191
		{
			qlVAL.Declaration = &AssignExpr{
				Location:       qlDollar[1].Token.Loc().Merge(qlDollar[5].Expr.Loc()),
				AssignmentType: qlDollar[1].Token,
				Name:           qlDollar[2].Token,
				TypeSpec:       qlDollar[3].TypeSpec,
				Assign:         qlDollar[4].Token,
				Expression:     qlDollar[5].Expr,
			}
		}
	case 13:
		qlDollar = qlS[qlpt-6 : qlpt+1]
//line ql.y:201
		{
			qlVAL.Declaration = &AssignExpr{
				Location:       qlDollar[1].Token.Loc().Merge(qlDollar[6].Expr.Loc()),
				AssignmentType: qlDollar[1].Token,
				Name:           qlDollar[2].Token,
				TypeSpec:       qlDollar[4].TypeSpec,
				Assign:         qlDollar[5].Token,
				Expression:     qlDollar[6].Expr,
			}
		}
	case 14:
		qlDollar = qlS[qlpt-0 : qlpt+1]
//line ql.y:214
		{
			qlVAL.Parameters = nil
		}
	case 15:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:217
		{
			qlVAL.Parameters = qlDollar[1].Parameters
		}
	case 16:
		qlDollar = qlS[qlpt-2 : qlpt+1]
//line ql.y:223
		{
			qlVAL.Parameters = []*Parameter{
				&Parameter{
					Location: qlDollar[1].Token.Loc().Merge(qlDollar[2].TypeSpec.Loc()),
					Name:     qlDollar[1].Token,
					TypeSpec: qlDollar[2].TypeSpec,
				},
			}
		}
	case 17:
		qlDollar = qlS[qlpt-4 : qlpt+1]
//line ql.y:232
		{
			qlDollar[1].Parameters[len(qlDollar[1].Parameters)-1].Location = qlDollar[1].Parameters[len(qlDollar[1].Parameters)-1].Location.Merge(qlDollar[2].Token.Loc())
			qlDollar[1].Parameters[len(qlDollar[1].Parameters)-1].Comma = qlDollar[2].Token
			qlVAL.Parameters = append(qlDollar[1].Parameters,
				&Parameter{
					Location: qlDollar[3].Token.Loc().Merge(qlDollar[4].TypeSpec.Loc()),
					Name:     qlDollar[3].Token,
					TypeSpec: qlDollar[4].TypeSpec,
				})
		}
	case 18:
		qlDollar = qlS[qlpt-0 : qlpt+1]
//line ql.y:245
		{ // NOTE: empty expr block evals to unit
			qlVAL.Statements = nil
		}
	case 19:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:248
		{
			qlVAL.Statements = qlDollar[1].Statements
		}
	case 20:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:254
		{
			if qlDollar[1].ControlFlowExpr != nil {
				qlVAL.Statements = append(qlVAL.Statements, qlDollar[1].ControlFlowExpr)
			}
		}
	case 21:
		qlDollar = qlS[qlpt-2 : qlpt+1]
//line ql.y:259
		{
			if qlDollar[2].ControlFlowExpr != nil {
				qlVAL.Statements = append(qlDollar[1].Statements, qlDollar[2].ControlFlowExpr)
			}
		}
	case 22:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:267
		{
			// do nothing
		}
	case 23:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:270
		{
			// do nothing
		}
	case 24:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:276
		{
			qlVAL.ControlFlowExpr = nil
		}
	case 25:
		qlDollar = qlS[qlpt-2 : qlpt+1]
//line ql.y:279
		{
			qlVAL.ControlFlowExpr = qlDollar[1].ControlFlowExpr
		}
	case 26:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:285
		{
			qlVAL.ControlFlowExpr = &Noop{
				Location: qlDollar[1].Token.Location,
				Value:    qlDollar[1].Token,
			}
		}
	case 27:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:291
		{
			qlVAL.ControlFlowExpr = &EvalExpr{
				Location:   qlDollar[1].Expr.Loc(),
				Expression: qlDollar[1].Expr,
			}
		}
	case 28:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:297
		{
			qlVAL.ControlFlowExpr = qlDollar[1].ControlFlowExpr
		}
	case 29:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:300
		{
			qlVAL.ControlFlowExpr = qlDollar[1].ControlFlowExpr
		}
	case 30:
		qlDollar = qlS[qlpt-0 : qlpt+1]
//line ql.y:306
		{
			qlVAL.ScopeDef = nil
		}
	case 31:
		qlDollar = qlS[qlpt-2 : qlpt+1]
//line ql.y:309
		{
			qlVAL.ScopeDef = &ScopeDef{
				Location: qlDollar[1].Token.Location.Merge(qlDollar[2].Token.Location),
				Name:     qlDollar[1].Token,
				At:       qlDollar[2].Token,
			}
		}
	case 32:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:319
		{
			qlVAL.Token = qlDollar[1].Token
		}
	case 33:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:322
		{
			qlVAL.Token = qlDollar[1].Token
		}
	case 34:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:325
		{
			qlVAL.Token = qlDollar[1].Token
		}
	case 35:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:328
		{
			qlVAL.Token = qlDollar[1].Token
		}
	case 36:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:331
		{
			qlVAL.Token = qlDollar[1].Token
		}
	case 37:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:334
		{
			qlVAL.Token = qlDollar[1].Token
		}
	case 38:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:340
		{
			qlVAL.TypeSpec = qlDollar[1].TypeSpec
		}
	case 39:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:343
		{
			qlVAL.TypeSpec = &NamedType{
				Location: qlDollar[1].Token.Loc(),
				Type:     qlDollar[1].Token,
			}
		}
	case 40:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:351
		{
			qlVAL.TypeSpec = &ScalarType{
				Location: qlDollar[1].Token.Loc(),
				Type:     qlDollar[1].Token,
			}
		}
	case 41:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:357
		{
			// The element type is not bind yet
			qlVAL.TypeSpec = &IterType{
				Location: qlDollar[1].Token.Location,
				Iter:     qlDollar[1].Token,
			}
		}
	case 42:
		qlDollar = qlS[qlpt-4 : qlpt+1]
//line ql.y:364
		{
			qlVAL.TypeSpec = &IterType{
				Location:    qlDollar[1].Token.Location.Merge(qlDollar[4].Token.Location),
				Iter:        qlDollar[1].Token,
				LBracket:    qlDollar[2].Token,
				ElementType: qlDollar[3].TypeSpec,
				RBracket:    qlDollar[4].Token,
			}
		}
	case 43:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:373
		{
			// The record field names and types are not bind yet
			qlVAL.TypeSpec = &RecordType{
				Location: qlDollar[1].Token.Location,
				Iter:     qlDollar[1].Token,
			}
		}
	case 44:
		qlDollar = qlS[qlpt-4 : qlpt+1]
//line ql.y:380
		{
			qlVAL.TypeSpec = &RecordType{
				Location: qlDollar[1].Token.Location.Merge(qlDollar[4].Token.Location),
				Iter:     qlDollar[1].Token,
				Lt:       qlDollar[2].Token,
				Fields:   qlDollar[3].Parameters,
				Gt:       qlDollar[4].Token,
			}
		}
	case 45:
		qlDollar = qlS[qlpt-2 : qlpt+1]
//line ql.y:392
		{
			qlVAL.ExprBlock = qlDollar[2].ExprBlock
			if qlDollar[1].ScopeDef != nil {
				qlVAL.ExprBlock.Location = qlDollar[1].ScopeDef.Location.Merge(qlDollar[2].ExprBlock.Location)
				qlVAL.ExprBlock.ScopeDef = qlDollar[1].ScopeDef
			}
		}
	case 46:
		qlDollar = qlS[qlpt-3 : qlpt+1]
//line ql.y:402
		{
			qlVAL.ExprBlock = &ExprBlock{
				Location:   qlDollar[1].Token.Loc().Merge(qlDollar[3].Token.Loc()),
				LBrace:     qlDollar[1].Token,
				Statements: qlDollar[2].Statements,
				RBrace:     qlDollar[3].Token,
			}
		}
	case 47:
		qlDollar = qlS[qlpt-2 : qlpt+1]
//line ql.y:413
		{
			qlVAL.ConditionalExpr = qlDollar[2].ConditionalExpr
			if qlDollar[1].ScopeDef != nil {
				qlVAL.ConditionalExpr.Location = qlDollar[1].ScopeDef.Location.Merge(qlDollar[2].ConditionalExpr.Location)
				qlVAL.ConditionalExpr.ScopeDef = qlDollar[1].ScopeDef
			}
		}
	case 48:
		qlDollar = qlS[qlpt-3 : qlpt+1]
//line ql.y:423
		{
			qlVAL.ConditionalExpr = &ConditionalExpr{
				Location:   qlDollar[1].Token.Loc().Merge(qlDollar[3].ExprBlock.Loc()),
				If:         qlDollar[1].Token,
				Predicate:  qlDollar[2].Expr,
				TrueClause: qlDollar[3].ExprBlock,
			}
		}
	case 49:
		qlDollar = qlS[qlpt-4 : qlpt+1]
//line ql.y:431
		{
			qlVAL.ConditionalExpr = &ConditionalExpr{
				Location:   qlDollar[1].Token.Loc().Merge(qlDollar[4].ExprBlock.Loc()),
				If:         qlDollar[1].Token,
				Predicate:  qlDollar[2].Expr,
				TrueClause: qlDollar[4].ExprBlock,
			}
		}
	case 50:
		qlDollar = qlS[qlpt-5 : qlpt+1]
//line ql.y:439
		{
			qlVAL.ConditionalExpr = &ConditionalExpr{
				Location:    qlDollar[1].Token.Loc().Merge(qlDollar[5].ConditionalExpr.Loc()),
				If:          qlDollar[1].Token,
				Predicate:   qlDollar[2].Expr,
				TrueClause:  qlDollar[3].ExprBlock,
				Else:        qlDollar[4].Token,
				FalseClause: qlDollar[5].ConditionalExpr,
			}
		}
	case 51:
		qlDollar = qlS[qlpt-6 : qlpt+1]
//line ql.y:449
		{
			qlVAL.ConditionalExpr = &ConditionalExpr{
				Location:    qlDollar[1].Token.Loc().Merge(qlDollar[6].ConditionalExpr.Loc()),
				If:          qlDollar[1].Token,
				Predicate:   qlDollar[2].Expr,
				TrueClause:  qlDollar[4].ExprBlock,
				Else:        qlDollar[5].Token,
				FalseClause: qlDollar[6].ConditionalExpr,
			}
		}
	case 52:
		qlDollar = qlS[qlpt-5 : qlpt+1]
//line ql.y:459
		{
			qlVAL.ConditionalExpr = &ConditionalExpr{
				Location:    qlDollar[1].Token.Loc().Merge(qlDollar[5].ExprBlock.Loc()),
				If:          qlDollar[1].Token,
				Predicate:   qlDollar[2].Expr,
				TrueClause:  qlDollar[3].ExprBlock,
				Else:        qlDollar[4].Token,
				FalseClause: qlDollar[5].ExprBlock,
			}
		}
	case 53:
		qlDollar = qlS[qlpt-6 : qlpt+1]
//line ql.y:469
		{
			qlVAL.ConditionalExpr = &ConditionalExpr{
				Location:    qlDollar[1].Token.Loc().Merge(qlDollar[6].ExprBlock.Loc()),
				If:          qlDollar[1].Token,
				Predicate:   qlDollar[2].Expr,
				TrueClause:  qlDollar[4].ExprBlock,
				Else:        qlDollar[5].Token,
				FalseClause: qlDollar[6].ExprBlock,
			}
		}
	case 54:
		qlDollar = qlS[qlpt-2 : qlpt+1]
//line ql.y:482
		{
			qlVAL.ForExpr = qlDollar[2].ForExpr
			if qlDollar[1].ScopeDef != nil {
				qlVAL.ForExpr.Location = qlDollar[1].ScopeDef.Location.Merge(qlDollar[2].ForExpr.Location)
				qlVAL.ForExpr.ScopeDef = qlDollar[1].ScopeDef
			}
		}
	case 55:
		qlDollar = qlS[qlpt-3 : qlpt+1]
//line ql.y:492
		{
			qlVAL.ForExpr = &ForExpr{
				Location:  qlDollar[1].Token.Location.Merge(qlDollar[3].ExprBlock.Location),
				For:       qlDollar[1].Token,
				Predicate: qlDollar[2].Expr,
				Body:      qlDollar[3].ExprBlock,
			}
		}
	case 56:
		qlDollar = qlS[qlpt-4 : qlpt+1]
//line ql.y:500
		{
			qlVAL.ForExpr = &ForExpr{
				Location:  qlDollar[1].Token.Location.Merge(qlDollar[4].ExprBlock.Location),
				For:       qlDollar[1].Token,
				Predicate: qlDollar[2].Expr,
				Body:      qlDollar[4].ExprBlock,
			}
		}
	case 57:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:511
		{
			qlVAL.Token = qlDollar[1].Token
		}
	case 58:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:514
		{
			qlVAL.Token = qlDollar[1].Token
		}
	case 59:
		qlDollar = qlS[qlpt-4 : qlpt+1]
//line ql.y:520
		{
			qlVAL.ControlFlowExpr = &AssignExpr{
				Location:       qlDollar[1].Token.Loc().Merge(qlDollar[4].Expr.Loc()),
				AssignmentType: qlDollar[1].Token,
				Name:           qlDollar[2].Token,
				Assign:         qlDollar[3].Token,
				Expression:     qlDollar[4].Expr,
			}
		}
	case 60:
		qlDollar = qlS[qlpt-5 : qlpt+1]
//line ql.y:529
		{
			qlVAL.ControlFlowExpr = &AssignExpr{
				Location:       qlDollar[1].Token.Loc().Merge(qlDollar[5].Expr.Loc()),
				AssignmentType: qlDollar[1].Token,
				Name:           qlDollar[2].Token,
				TypeSpec:       qlDollar[3].TypeSpec,
				Assign:         qlDollar[4].Token,
				Expression:     qlDollar[5].Expr,
			}
		}
	case 61:
		qlDollar = qlS[qlpt-6 : qlpt+1]
//line ql.y:539
		{
			qlVAL.ControlFlowExpr = &AssignExpr{
				Location:       qlDollar[1].Token.Loc().Merge(qlDollar[6].Expr.Loc()),
				AssignmentType: qlDollar[1].Token,
				Name:           qlDollar[2].Token,
				TypeSpec:       qlDollar[4].TypeSpec,
				Assign:         qlDollar[5].Token,
				Expression:     qlDollar[6].Expr,
			}
		}
	case 62:
		qlDollar = qlS[qlpt-3 : qlpt+1]
//line ql.y:548
		{
			qlVAL.ControlFlowExpr = &AssignExpr{
				Location:   qlDollar[1].Token.Loc().Merge(qlDollar[3].Expr.Loc()),
				Name:       qlDollar[1].Token,
				Assign:     qlDollar[2].Token,
				Expression: qlDollar[3].Expr,
			}
		}
	case 63:
		qlDollar = qlS[qlpt-2 : qlpt+1]
//line ql.y:559
		{
			qlVAL.ControlFlowExpr = &ReturnExpr{
				Location:   qlDollar[1].Token.Loc().Merge(qlDollar[2].Expr.Loc()),
				Return:     qlDollar[1].Token,
				Expression: qlDollar[2].Expr,
			}
		}
	case 64:
		qlDollar = qlS[qlpt-4 : qlpt+1]
//line ql.y:566
		{
			qlVAL.ControlFlowExpr = &ReturnExpr{
				Location:   qlDollar[1].Token.Loc().Merge(qlDollar[4].Expr.Loc()),
				Return:     qlDollar[1].Token,
				At:         qlDollar[2].Token,
				Label:      qlDollar[3].Token,
				Expression: qlDollar[4].Expr,
			}
		}
	case 65:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:578
		{
			qlVAL.Expr = qlDollar[1].Expr
		}
	case 66:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:584
		{
			qlVAL.Token = qlDollar[1].Token
		}
	case 67:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:587
		{
			qlVAL.Token = qlDollar[1].Token
		}
	case 68:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:590
		{
			qlVAL.Token = qlDollar[1].Token
		}
	case 69:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:593
		{
			qlVAL.Token = qlDollar[1].Token
		}
	case 70:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:596
		{
			qlVAL.Token = qlDollar[1].Token
		}
	case 71:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:603
		{
			qlVAL.Expr = &Identifier{
				Location: qlDollar[1].Token.Location,
				Value:    qlDollar[1].Token,
			}
		}
	case 72:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:609
		{
			qlVAL.Expr = &Literal{
				Location: qlDollar[1].Token.Location,
				Value:    qlDollar[1].Token,
			}
		}
	case 73:
		qlDollar = qlS[qlpt-3 : qlpt+1]
//line ql.y:615
		{
			// The expression type is unknown until type checking.  It could
			// either be a iter or a record.
			qlVAL.Expr = &Invocation{
				Location:  qlDollar[1].Token.Loc().Merge(qlDollar[3].Token.Loc()),
				LParen:    qlDollar[1].Token,
				Arguments: qlDollar[2].Arguments,
				RParen:    qlDollar[3].Token,
			}
		}
	case 74:
		qlDollar = qlS[qlpt-4 : qlpt+1]
//line ql.y:625
		{
			qlVAL.Expr = &Invocation{
				Location:       qlDollar[1].TypeSpec.Loc().Merge(qlDollar[4].Token.Loc()),
				ExprOrTypeSpec: qlDollar[1].TypeSpec,
				LParen:         qlDollar[2].Token,
				Arguments:      qlDollar[3].Arguments,
				RParen:         qlDollar[4].Token,
			}
		}
	case 75:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:634
		{
			qlVAL.Expr = qlDollar[1].ExprBlock
		}
	case 76:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:637
		{
			qlVAL.Expr = qlDollar[1].ConditionalExpr
		}
	case 77:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:640
		{
			qlVAL.Expr = qlDollar[1].ForExpr
		}
	case 78:
		qlDollar = qlS[qlpt-3 : qlpt+1]
//line ql.y:643
		{
			qlVAL.Expr = &Accessor{
				Location:    qlDollar[1].Expr.Loc().Merge(qlDollar[3].Token.Loc()),
				PrimaryExpr: qlDollar[1].Expr,
				Dot:         qlDollar[2].Token,
				Name:        qlDollar[3].Token,
			}
		}
	case 79:
		qlDollar = qlS[qlpt-4 : qlpt+1]
//line ql.y:651
		{
			qlVAL.Expr = &Invocation{
				Location:       qlDollar[1].Expr.Loc().Merge(qlDollar[4].Token.Loc()),
				ExprOrTypeSpec: qlDollar[1].Expr,
				LParen:         qlDollar[2].Token,
				Arguments:      qlDollar[3].Arguments,
				RParen:         qlDollar[4].Token,
			}
		}
	case 80:
		qlDollar = qlS[qlpt-0 : qlpt+1]
//line ql.y:663
		{ // empty
			qlVAL.Arguments = nil
		}
	case 81:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:666
		{
			qlVAL.Arguments = qlDollar[1].Arguments
		}
	case 82:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:669
		{
			qlVAL.Arguments = qlDollar[1].Arguments
		}
	case 83:
		qlDollar = qlS[qlpt-3 : qlpt+1]
//line ql.y:672
		{
			qlDollar[1].Arguments[len(qlDollar[1].Arguments)-1].Location = qlDollar[1].Arguments[len(qlDollar[1].Arguments)-1].Location.Merge(qlDollar[2].Token.Loc())
			qlVAL.Arguments = append(qlDollar[1].Arguments, qlDollar[3].Arguments...)
		}
	case 84:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:679
		{
			qlVAL.Arguments = []*Argument{
				&Argument{
					Location:   qlDollar[1].Expr.Loc(),
					Expression: qlDollar[1].Expr,
				},
			}
		}
	case 85:
		qlDollar = qlS[qlpt-3 : qlpt+1]
//line ql.y:687
		{
			qlDollar[1].Arguments[len(qlDollar[1].Arguments)-1].Location = qlDollar[1].Arguments[len(qlDollar[1].Arguments)-1].Location.Merge(qlDollar[2].Token.Loc())
			qlDollar[1].Arguments[len(qlDollar[1].Arguments)-1].Comma = qlDollar[2].Token
			qlVAL.Arguments = append(qlDollar[1].Arguments,
				&Argument{
					Location:   qlDollar[3].Expr.Loc(),
					Expression: qlDollar[3].Expr,
				})
		}
	case 86:
		qlDollar = qlS[qlpt-3 : qlpt+1]
//line ql.y:699
		{
			qlVAL.Arguments = []*Argument{
				&Argument{
					Location:   qlDollar[1].Token.Loc().Merge(qlDollar[3].Expr.Loc()),
					Name:       qlDollar[1].Token,
					Assign:     qlDollar[2].Token,
					Expression: qlDollar[3].Expr,
				},
			}
		}
	case 87:
		qlDollar = qlS[qlpt-5 : qlpt+1]
//line ql.y:709
		{
			qlDollar[1].Arguments[len(qlDollar[1].Arguments)-1].Location = qlDollar[1].Arguments[len(qlDollar[1].Arguments)-1].Location.Merge(qlDollar[2].Token.Loc())
			qlDollar[1].Arguments[len(qlDollar[1].Arguments)-1].Comma = qlDollar[2].Token
			qlVAL.Arguments = append(qlDollar[1].Arguments,
				&Argument{
					Location:   qlDollar[3].Token.Loc().Merge(qlDollar[5].Expr.Loc()),
					Name:       qlDollar[3].Token,
					Assign:     qlDollar[4].Token,
					Expression: qlDollar[5].Expr,
				})
		}
	case 88:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:724
		{
			qlVAL.Expr = qlDollar[1].Expr
		}
	case 89:
		qlDollar = qlS[qlpt-3 : qlpt+1]
//line ql.y:727
		{
			qlVAL.Expr = &BinaryExpr{
				Location: qlDollar[1].Expr.Loc().Merge(qlDollar[3].Expr.Loc()),
				Left:     qlDollar[1].Expr,
				Op:       qlDollar[2].Token,
				Right:    qlDollar[3].Expr,
			}
		}
	case 90:
		qlDollar = qlS[qlpt-3 : qlpt+1]
//line ql.y:735
		{
			qlVAL.Expr = &BinaryExpr{
				Location: qlDollar[1].Expr.Loc().Merge(qlDollar[3].Expr.Loc()),
				Left:     qlDollar[1].Expr,
				Op:       qlDollar[2].Token,
				Right:    qlDollar[3].Expr,
			}
		}
	case 91:
		qlDollar = qlS[qlpt-3 : qlpt+1]
//line ql.y:743
		{
			qlVAL.Expr = &BinaryExpr{
				Location: qlDollar[1].Expr.Loc().Merge(qlDollar[3].Expr.Loc()),
				Left:     qlDollar[1].Expr,
				Op:       qlDollar[2].Token,
				Right:    qlDollar[3].Expr,
			}
		}
	case 92:
		qlDollar = qlS[qlpt-3 : qlpt+1]
//line ql.y:751
		{
			qlVAL.Expr = &BinaryExpr{
				Location: qlDollar[1].Expr.Loc().Merge(qlDollar[3].Expr.Loc()),
				Left:     qlDollar[1].Expr,
				Op:       qlDollar[2].Token,
				Right:    qlDollar[3].Expr,
			}
		}
	case 93:
		qlDollar = qlS[qlpt-3 : qlpt+1]
//line ql.y:759
		{
			qlVAL.Expr = &BinaryExpr{
				Location: qlDollar[1].Expr.Loc().Merge(qlDollar[3].Expr.Loc()),
				Left:     qlDollar[1].Expr,
				Op:       qlDollar[2].Token,
				Right:    qlDollar[3].Expr,
			}
		}
	case 94:
		qlDollar = qlS[qlpt-3 : qlpt+1]
//line ql.y:767
		{
			qlVAL.Expr = &BinaryExpr{
				Location: qlDollar[1].Expr.Loc().Merge(qlDollar[3].Expr.Loc()),
				Left:     qlDollar[1].Expr,
				Op:       qlDollar[2].Token,
				Right:    qlDollar[3].Expr,
			}
		}
	case 95:
		qlDollar = qlS[qlpt-3 : qlpt+1]
//line ql.y:775
		{
			qlVAL.Expr = &BinaryExpr{
				Location: qlDollar[1].Expr.Loc().Merge(qlDollar[3].Expr.Loc()),
				Left:     qlDollar[1].Expr,
				Op:       qlDollar[2].Token,
				Right:    qlDollar[3].Expr,
			}
		}
	case 96:
		qlDollar = qlS[qlpt-3 : qlpt+1]
//line ql.y:783
		{
			qlVAL.Expr = &BinaryExpr{
				Location: qlDollar[1].Expr.Loc().Merge(qlDollar[3].Expr.Loc()),
				Left:     qlDollar[1].Expr,
				Op:       qlDollar[2].Token,
				Right:    qlDollar[3].Expr,
			}
		}
	case 97:
		qlDollar = qlS[qlpt-3 : qlpt+1]
//line ql.y:791
		{
			qlVAL.Expr = &BinaryExpr{
				Location: qlDollar[1].Expr.Loc().Merge(qlDollar[3].Expr.Loc()),
				Left:     qlDollar[1].Expr,
				Op:       qlDollar[2].Token,
				Right:    qlDollar[3].Expr,
			}
		}
	case 98:
		qlDollar = qlS[qlpt-3 : qlpt+1]
//line ql.y:799
		{
			qlVAL.Expr = &BinaryExpr{
				Location: qlDollar[1].Expr.Loc().Merge(qlDollar[3].Expr.Loc()),
				Left:     qlDollar[1].Expr,
				Op:       qlDollar[2].Token,
				Right:    qlDollar[3].Expr,
			}
		}
	case 99:
		qlDollar = qlS[qlpt-3 : qlpt+1]
//line ql.y:807
		{
			qlVAL.Expr = &BinaryExpr{
				Location: qlDollar[1].Expr.Loc().Merge(qlDollar[3].Expr.Loc()),
				Left:     qlDollar[1].Expr,
				Op:       qlDollar[2].Token,
				Right:    qlDollar[3].Expr,
			}
		}
	case 100:
		qlDollar = qlS[qlpt-3 : qlpt+1]
//line ql.y:815
		{
			qlVAL.Expr = &BinaryExpr{
				Location: qlDollar[1].Expr.Loc().Merge(qlDollar[3].Expr.Loc()),
				Left:     qlDollar[1].Expr,
				Op:       qlDollar[2].Token,
				Right:    qlDollar[3].Expr,
			}
		}
	case 101:
		qlDollar = qlS[qlpt-3 : qlpt+1]
//line ql.y:823
		{
			qlVAL.Expr = &BinaryExpr{
				Location: qlDollar[1].Expr.Loc().Merge(qlDollar[3].Expr.Loc()),
				Left:     qlDollar[1].Expr,
				Op:       qlDollar[2].Token,
				Right:    qlDollar[3].Expr,
			}
		}
	case 102:
		qlDollar = qlS[qlpt-3 : qlpt+1]
//line ql.y:831
		{
			qlVAL.Expr = &BinaryExpr{
				Location: qlDollar[1].Expr.Loc().Merge(qlDollar[3].Expr.Loc()),
				Left:     qlDollar[1].Expr,
				Op:       qlDollar[2].Token,
				Right:    qlDollar[3].Expr,
			}
		}
	case 103:
		qlDollar = qlS[qlpt-3 : qlpt+1]
//line ql.y:839
		{
			qlVAL.Expr = &BinaryExpr{
				Location: qlDollar[1].Expr.Loc().Merge(qlDollar[3].Expr.Loc()),
				Left:     qlDollar[1].Expr,
				Op:       qlDollar[2].Token,
				Right:    qlDollar[3].Expr,
			}
		}
	case 104:
		qlDollar = qlS[qlpt-3 : qlpt+1]
//line ql.y:847
		{
			qlVAL.Expr = &BinaryExpr{
				Location: qlDollar[1].Expr.Loc().Merge(qlDollar[3].Expr.Loc()),
				Left:     qlDollar[1].Expr,
				Op:       qlDollar[2].Token,
				Right:    qlDollar[3].Expr,
			}
		}
	case 105:
		qlDollar = qlS[qlpt-3 : qlpt+1]
//line ql.y:855
		{
			qlVAL.Expr = &BinaryExpr{
				Location: qlDollar[1].Expr.Loc().Merge(qlDollar[3].Expr.Loc()),
				Left:     qlDollar[1].Expr,
				Op:       qlDollar[2].Token,
				Right:    qlDollar[3].Expr,
			}
		}
	case 106:
		qlDollar = qlS[qlpt-3 : qlpt+1]
//line ql.y:863
		{
			qlVAL.Expr = &BinaryExpr{
				Location: qlDollar[1].Expr.Loc().Merge(qlDollar[3].Expr.Loc()),
				Left:     qlDollar[1].Expr,
				Op:       qlDollar[2].Token,
				Right:    qlDollar[3].Expr,
			}
		}
	case 107:
		qlDollar = qlS[qlpt-2 : qlpt+1]
//line ql.y:871
		{
			qlVAL.Expr = &UnaryExpr{
				Location:   qlDollar[1].Token.Loc().Merge(qlDollar[2].Expr.Loc()),
				Op:         qlDollar[1].Token,
				Expression: qlDollar[2].Expr,
			}
		}
	case 108:
		qlDollar = qlS[qlpt-2 : qlpt+1]
//line ql.y:878
		{
			qlVAL.Expr = &UnaryExpr{
				Location:   qlDollar[1].Token.Loc().Merge(qlDollar[2].Expr.Loc()),
				Op:         qlDollar[1].Token,
				Expression: qlDollar[2].Expr,
			}
		}
	}
	goto qlstack /* stack new state and value */
}
