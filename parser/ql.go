// Code generated by goyacc -o ql.go -v ql.output -p ql ql.y. DO NOT EDIT.

//line ql.y:2
package parser

import __yyfmt__ "fmt"

//line ql.y:2

//line ql.y:5
type qlSymType struct {
	yys int
	*Token

	*AssignExpr
	Expr

	Nodes []Node
}

const LEX_ERROR = 57346
const L_BRACE = 57347
const R_BRACE = 57348
const L_PAREN = 57349
const R_PAREN = 57350
const L_BRACKET = 57351
const R_BRACKET = 57352
const ASSIGN = 57353
const COLON = 57354
const SEMICOLON = 57355
const NEWLINE = 57356
const COMMA = 57357
const DOT = 57358
const STAR_STAR = 57359
const LET = 57360
const OR = 57361
const AND = 57362
const NOT = 57363
const LT = 57364
const GT = 57365
const EQ = 57366
const NE = 57367
const LE = 57368
const GE = 57369
const BITWISE_OR = 57370
const BITWISE_AND = 57371
const XOR = 57372
const L_SHIFT = 57373
const R_SHIFT = 57374
const ADD = 57375
const SUB = 57376
const MUL = 57377
const DIV = 57378
const MOD = 57379
const UNARY = 57380
const IDENTIFIER = 57381
const COMMENT_GROUP = 57382

var qlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"L_BRACE",
	"R_BRACE",
	"L_PAREN",
	"R_PAREN",
	"L_BRACKET",
	"R_BRACKET",
	"ASSIGN",
	"COLON",
	"SEMICOLON",
	"NEWLINE",
	"COMMA",
	"DOT",
	"STAR_STAR",
	"LET",
	"OR",
	"AND",
	"NOT",
	"LT",
	"GT",
	"EQ",
	"NE",
	"LE",
	"GE",
	"BITWISE_OR",
	"BITWISE_AND",
	"XOR",
	"L_SHIFT",
	"R_SHIFT",
	"ADD",
	"SUB",
	"MUL",
	"DIV",
	"MOD",
	"UNARY",
	"IDENTIFIER",
	"COMMENT_GROUP",
}
var qlStatenames = [...]string{}

const qlEofCode = 1
const qlErrCode = 2
const qlInitialStackSize = 16

//line ql.y:386

//line yacctab:1
var qlExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const qlPrivate = 57344

const qlLast = 168

var qlAct = [...]int{

	14, 45, 31, 32, 69, 33, 34, 35, 36, 37,
	38, 39, 35, 36, 37, 38, 39, 42, 43, 37,
	38, 39, 44, 75, 49, 50, 51, 52, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 68, 70, 32, 9, 33, 34, 35, 36, 37,
	38, 39, 12, 23, 24, 40, 25, 26, 27, 28,
	29, 30, 31, 32, 41, 33, 34, 35, 36, 37,
	38, 39, 72, 73, 76, 77, 78, 23, 24, 74,
	25, 26, 27, 28, 29, 30, 31, 32, 71, 33,
	34, 35, 36, 37, 38, 39, 24, 67, 25, 26,
	27, 28, 29, 30, 31, 32, 46, 33, 34, 35,
	36, 37, 38, 39, 25, 26, 27, 28, 29, 30,
	31, 32, 6, 33, 34, 35, 36, 37, 38, 39,
	22, 66, 21, 22, 20, 21, 33, 34, 35, 36,
	37, 38, 39, 47, 5, 3, 17, 7, 8, 17,
	19, 1, 2, 10, 11, 15, 13, 4, 0, 16,
	0, 0, 16, 0, 18, 48, 0, 18,
}
var qlPact = [...]int{

	104, -1000, 134, -1000, -1000, -1000, 5, 104, 104, 41,
	-1000, -1000, 128, -1000, 58, 48, 128, 128, -1000, -1000,
	-1000, 128, 125, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, -35, -1000, 92, 34, 82, 59, -1000, -1000, 76,
	92, -26, -26, -26, -26, -26, -26, 14, 105, -21,
	-21, -16, -16, -1000, -1000, -1000, 71, 8, 58, -1000,
	-1000, -1000, 125, 125, -1000, 128, -1000, -1000, 58,
}
var qlPgo = [...]int{

	0, 157, 143, 155, 0, 145, 152, 151, 150, 134,
	131, 1, 106, 97,
}
var qlR1 = [...]int{

	0, 7, 6, 6, 6, 5, 5, 2, 3, 3,
	3, 3, 3, 9, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 8, 11, 11, 11, 12, 12,
	10, 10, 13, 13, 1,
}
var qlR2 = [...]int{

	0, 1, 1, 3, 3, 1, 1, 1, 1, 1,
	1, 4, 3, 3, 1, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 3, 1, 3, 3, 1, 1,
	0, 1, 1, 3, 4,
}
var qlChk = [...]int{

	-1000, -7, -6, -5, -1, 40, 18, 13, 14, 39,
	-5, -5, 11, -2, -4, -3, 34, 21, 39, -8,
	-9, 7, 5, 19, 20, 22, 23, 24, 25, 26,
	27, 28, 29, 31, 32, 33, 34, 35, 36, 37,
	7, 16, -4, -4, -4, -11, -12, -2, 40, -4,
	-4, -4, -4, -4, -4, -4, -4, -4, -4, -4,
	-4, -4, -4, -4, -4, -4, -10, -13, -4, 39,
	8, 6, 13, 14, 8, 15, -11, -11, -4,
}
var qlDef = [...]int{

	0, -2, 1, 2, 5, 6, 0, 0, 0, 0,
	3, 4, 0, 44, 7, 14, 0, 0, 8, 9,
	10, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	40, 0, 32, 33, 0, 0, 35, 38, 39, 15,
	16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
	26, 27, 28, 29, 30, 31, 0, 41, 42, 13,
	12, 34, 0, 0, 11, 0, 36, 37, 43,
}
var qlTok1 = [...]int{

	1,
}
var qlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40,
}
var qlTok3 = [...]int{
	0,
}

var qlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	qlDebug        = 0
	qlErrorVerbose = false
)

type qlLexer interface {
	Lex(lval *qlSymType) int
	Error(s string)
}

type qlParser interface {
	Parse(qlLexer) int
	Lookahead() int
}

type qlParserImpl struct {
	lval  qlSymType
	stack [qlInitialStackSize]qlSymType
	char  int
}

func (p *qlParserImpl) Lookahead() int {
	return p.char
}

func qlNewParser() qlParser {
	return &qlParserImpl{}
}

const qlFlag = -1000

func qlTokname(c int) string {
	if c >= 1 && c-1 < len(qlToknames) {
		if qlToknames[c-1] != "" {
			return qlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func qlStatname(s int) string {
	if s >= 0 && s < len(qlStatenames) {
		if qlStatenames[s] != "" {
			return qlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func qlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !qlErrorVerbose {
		return "syntax error"
	}

	for _, e := range qlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + qlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := qlPact[state]
	for tok := TOKSTART; tok-1 < len(qlToknames); tok++ {
		if n := base + tok; n >= 0 && n < qlLast && qlChk[qlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if qlDef[state] == -2 {
		i := 0
		for qlExca[i] != -1 || qlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; qlExca[i] >= 0; i += 2 {
			tok := qlExca[i]
			if tok < TOKSTART || qlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if qlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += qlTokname(tok)
	}
	return res
}

func qllex1(lex qlLexer, lval *qlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = qlTok1[0]
		goto out
	}
	if char < len(qlTok1) {
		token = qlTok1[char]
		goto out
	}
	if char >= qlPrivate {
		if char < qlPrivate+len(qlTok2) {
			token = qlTok2[char-qlPrivate]
			goto out
		}
	}
	for i := 0; i < len(qlTok3); i += 2 {
		token = qlTok3[i+0]
		if token == char {
			token = qlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = qlTok2[1] /* unknown char */
	}
	if qlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", qlTokname(token), uint(char))
	}
	return char, token
}

func qlParse(qllex qlLexer) int {
	return qlNewParser().Parse(qllex)
}

func (qlrcvr *qlParserImpl) Parse(qllex qlLexer) int {
	var qln int
	var qlVAL qlSymType
	var qlDollar []qlSymType
	_ = qlDollar // silence set and not used
	qlS := qlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	qlstate := 0
	qlrcvr.char = -1
	qltoken := -1 // qlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		qlstate = -1
		qlrcvr.char = -1
		qltoken = -1
	}()
	qlp := -1
	goto qlstack

ret0:
	return 0

ret1:
	return 1

qlstack:
	/* put a state and value onto the stack */
	if qlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", qlTokname(qltoken), qlStatname(qlstate))
	}

	qlp++
	if qlp >= len(qlS) {
		nyys := make([]qlSymType, len(qlS)*2)
		copy(nyys, qlS)
		qlS = nyys
	}
	qlS[qlp] = qlVAL
	qlS[qlp].yys = qlstate

qlnewstate:
	qln = qlPact[qlstate]
	if qln <= qlFlag {
		goto qldefault /* simple state */
	}
	if qlrcvr.char < 0 {
		qlrcvr.char, qltoken = qllex1(qllex, &qlrcvr.lval)
	}
	qln += qltoken
	if qln < 0 || qln >= qlLast {
		goto qldefault
	}
	qln = qlAct[qln]
	if qlChk[qln] == qltoken { /* valid shift */
		qlrcvr.char = -1
		qltoken = -1
		qlVAL = qlrcvr.lval
		qlstate = qln
		if Errflag > 0 {
			Errflag--
		}
		goto qlstack
	}

qldefault:
	/* default state action */
	qln = qlDef[qlstate]
	if qln == -2 {
		if qlrcvr.char < 0 {
			qlrcvr.char, qltoken = qllex1(qllex, &qlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if qlExca[xi+0] == -1 && qlExca[xi+1] == qlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			qln = qlExca[xi+0]
			if qln < 0 || qln == qltoken {
				break
			}
		}
		qln = qlExca[xi+1]
		if qln < 0 {
			goto ret0
		}
	}
	if qln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			qllex.Error(qlErrorMessage(qlstate, qltoken))
			Nerrs++
			if qlDebug >= 1 {
				__yyfmt__.Printf("%s", qlStatname(qlstate))
				__yyfmt__.Printf(" saw %s\n", qlTokname(qltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for qlp >= 0 {
				qln = qlPact[qlS[qlp].yys] + qlErrCode
				if qln >= 0 && qln < qlLast {
					qlstate = qlAct[qln] /* simulate a shift of "error" */
					if qlChk[qlstate] == qlErrCode {
						goto qlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if qlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", qlS[qlp].yys)
				}
				qlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if qlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", qlTokname(qltoken))
			}
			if qltoken == qlEofCode {
				goto ret1
			}
			qlrcvr.char = -1
			qltoken = -1
			goto qlnewstate /* try again in the same state */
		}
	}

	/* reduction by production qln */
	if qlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", qln, qlStatname(qlstate))
	}

	qlnt := qln
	qlpt := qlp
	_ = qlpt // guard against "declared and not used"

	qlp -= qlR2[qln]
	// qlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if qlp+1 >= len(qlS) {
		nyys := make([]qlSymType, len(qlS)*2)
		copy(nyys, qlS)
		qlS = nyys
	}
	qlVAL = qlS[qlp+1]

	/* consult goto table to find next state */
	qln = qlR1[qln]
	qlg := qlPgo[qln]
	qlj := qlg + qlS[qlp].yys + 1

	if qlj >= qlLast {
		qlstate = qlAct[qlg]
	} else {
		qlstate = qlAct[qlj]
		if qlChk[qlstate] != -qln {
			qlstate = qlAct[qlg]
		}
	}
	// dummy call; replaced with literal code
	switch qlnt {

	case 1:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:47
		{
			qllex.(*parseContext).setParsed(qlDollar[1].Nodes)
		}
	case 2:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:54
		{
			qlVAL.Nodes = []Node{qlDollar[1].Expr}
		}
	case 3:
		qlDollar = qlS[qlpt-3 : qlpt+1]
//line ql.y:57
		{
			qlVAL.Nodes = append(qlDollar[1].Nodes, qlDollar[3].Expr)
		}
	case 4:
		qlDollar = qlS[qlpt-3 : qlpt+1]
//line ql.y:60
		{
			qlVAL.Nodes = append(qlDollar[1].Nodes, qlDollar[3].Expr)
		}
	case 5:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:67
		{
			qlVAL.Expr = qlDollar[1].AssignExpr
		}
	case 6:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:70
		{
		}
	case 7:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:75
		{
		}
	case 8:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:81
		{
			qlVAL.Expr = &Identifier{
				Location: qlDollar[1].Token.Location,
				Value:    qlDollar[1].Token.Value,
			}
		}
	case 9:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:87
		{
		}
	case 10:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:89
		{
		}
	case 11:
		qlDollar = qlS[qlpt-4 : qlpt+1]
//line ql.y:91
		{
		}
	case 12:
		qlDollar = qlS[qlpt-3 : qlpt+1]
//line ql.y:93
		{
		}
	case 13:
		qlDollar = qlS[qlpt-3 : qlpt+1]
//line ql.y:98
		{
		}
	case 14:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:104
		{
		}
	case 15:
		qlDollar = qlS[qlpt-3 : qlpt+1]
//line ql.y:106
		{
			qlVAL.Expr = &BinaryExpr{
				Location: Location{
					Filename: qlDollar[1].Expr.Loc().Filename,
					Start:    qlDollar[1].Expr.Loc().Start,
					End:      qlDollar[3].Expr.Loc().End,
				},
				Left:  qlDollar[1].Expr,
				Op:    qlDollar[2].Token,
				Right: qlDollar[3].Expr,
			}
		}
	case 16:
		qlDollar = qlS[qlpt-3 : qlpt+1]
//line ql.y:118
		{
			qlVAL.Expr = &BinaryExpr{
				Location: Location{
					Filename: qlDollar[1].Expr.Loc().Filename,
					Start:    qlDollar[1].Expr.Loc().Start,
					End:      qlDollar[3].Expr.Loc().End,
				},
				Left:  qlDollar[1].Expr,
				Op:    qlDollar[2].Token,
				Right: qlDollar[3].Expr,
			}
		}
	case 17:
		qlDollar = qlS[qlpt-3 : qlpt+1]
//line ql.y:130
		{
			qlVAL.Expr = &BinaryExpr{
				Location: Location{
					Filename: qlDollar[1].Expr.Loc().Filename,
					Start:    qlDollar[1].Expr.Loc().Start,
					End:      qlDollar[3].Expr.Loc().End,
				},
				Left:  qlDollar[1].Expr,
				Op:    qlDollar[2].Token,
				Right: qlDollar[3].Expr,
			}
		}
	case 18:
		qlDollar = qlS[qlpt-3 : qlpt+1]
//line ql.y:142
		{
			qlVAL.Expr = &BinaryExpr{
				Location: Location{
					Filename: qlDollar[1].Expr.Loc().Filename,
					Start:    qlDollar[1].Expr.Loc().Start,
					End:      qlDollar[3].Expr.Loc().End,
				},
				Left:  qlDollar[1].Expr,
				Op:    qlDollar[2].Token,
				Right: qlDollar[3].Expr,
			}
		}
	case 19:
		qlDollar = qlS[qlpt-3 : qlpt+1]
//line ql.y:154
		{
			qlVAL.Expr = &BinaryExpr{
				Location: Location{
					Filename: qlDollar[1].Expr.Loc().Filename,
					Start:    qlDollar[1].Expr.Loc().Start,
					End:      qlDollar[3].Expr.Loc().End,
				},
				Left:  qlDollar[1].Expr,
				Op:    qlDollar[2].Token,
				Right: qlDollar[3].Expr,
			}
		}
	case 20:
		qlDollar = qlS[qlpt-3 : qlpt+1]
//line ql.y:166
		{
			qlVAL.Expr = &BinaryExpr{
				Location: Location{
					Filename: qlDollar[1].Expr.Loc().Filename,
					Start:    qlDollar[1].Expr.Loc().Start,
					End:      qlDollar[3].Expr.Loc().End,
				},
				Left:  qlDollar[1].Expr,
				Op:    qlDollar[2].Token,
				Right: qlDollar[3].Expr,
			}
		}
	case 21:
		qlDollar = qlS[qlpt-3 : qlpt+1]
//line ql.y:178
		{
			qlVAL.Expr = &BinaryExpr{
				Location: Location{
					Filename: qlDollar[1].Expr.Loc().Filename,
					Start:    qlDollar[1].Expr.Loc().Start,
					End:      qlDollar[3].Expr.Loc().End,
				},
				Left:  qlDollar[1].Expr,
				Op:    qlDollar[2].Token,
				Right: qlDollar[3].Expr,
			}
		}
	case 22:
		qlDollar = qlS[qlpt-3 : qlpt+1]
//line ql.y:190
		{
			qlVAL.Expr = &BinaryExpr{
				Location: Location{
					Filename: qlDollar[1].Expr.Loc().Filename,
					Start:    qlDollar[1].Expr.Loc().Start,
					End:      qlDollar[3].Expr.Loc().End,
				},
				Left:  qlDollar[1].Expr,
				Op:    qlDollar[2].Token,
				Right: qlDollar[3].Expr,
			}
		}
	case 23:
		qlDollar = qlS[qlpt-3 : qlpt+1]
//line ql.y:202
		{
			qlVAL.Expr = &BinaryExpr{
				Location: Location{
					Filename: qlDollar[1].Expr.Loc().Filename,
					Start:    qlDollar[1].Expr.Loc().Start,
					End:      qlDollar[3].Expr.Loc().End,
				},
				Left:  qlDollar[1].Expr,
				Op:    qlDollar[2].Token,
				Right: qlDollar[3].Expr,
			}
		}
	case 24:
		qlDollar = qlS[qlpt-3 : qlpt+1]
//line ql.y:214
		{
			qlVAL.Expr = &BinaryExpr{
				Location: Location{
					Filename: qlDollar[1].Expr.Loc().Filename,
					Start:    qlDollar[1].Expr.Loc().Start,
					End:      qlDollar[3].Expr.Loc().End,
				},
				Left:  qlDollar[1].Expr,
				Op:    qlDollar[2].Token,
				Right: qlDollar[3].Expr,
			}
		}
	case 25:
		qlDollar = qlS[qlpt-3 : qlpt+1]
//line ql.y:226
		{
			qlVAL.Expr = &BinaryExpr{
				Location: Location{
					Filename: qlDollar[1].Expr.Loc().Filename,
					Start:    qlDollar[1].Expr.Loc().Start,
					End:      qlDollar[3].Expr.Loc().End,
				},
				Left:  qlDollar[1].Expr,
				Op:    qlDollar[2].Token,
				Right: qlDollar[3].Expr,
			}
		}
	case 26:
		qlDollar = qlS[qlpt-3 : qlpt+1]
//line ql.y:238
		{
			qlVAL.Expr = &BinaryExpr{
				Location: Location{
					Filename: qlDollar[1].Expr.Loc().Filename,
					Start:    qlDollar[1].Expr.Loc().Start,
					End:      qlDollar[3].Expr.Loc().End,
				},
				Left:  qlDollar[1].Expr,
				Op:    qlDollar[2].Token,
				Right: qlDollar[3].Expr,
			}
		}
	case 27:
		qlDollar = qlS[qlpt-3 : qlpt+1]
//line ql.y:250
		{
			qlVAL.Expr = &BinaryExpr{
				Location: Location{
					Filename: qlDollar[1].Expr.Loc().Filename,
					Start:    qlDollar[1].Expr.Loc().Start,
					End:      qlDollar[3].Expr.Loc().End,
				},
				Left:  qlDollar[1].Expr,
				Op:    qlDollar[2].Token,
				Right: qlDollar[3].Expr,
			}
		}
	case 28:
		qlDollar = qlS[qlpt-3 : qlpt+1]
//line ql.y:262
		{
			qlVAL.Expr = &BinaryExpr{
				Location: Location{
					Filename: qlDollar[1].Expr.Loc().Filename,
					Start:    qlDollar[1].Expr.Loc().Start,
					End:      qlDollar[3].Expr.Loc().End,
				},
				Left:  qlDollar[1].Expr,
				Op:    qlDollar[2].Token,
				Right: qlDollar[3].Expr,
			}
		}
	case 29:
		qlDollar = qlS[qlpt-3 : qlpt+1]
//line ql.y:274
		{
			qlVAL.Expr = &BinaryExpr{
				Location: Location{
					Filename: qlDollar[1].Expr.Loc().Filename,
					Start:    qlDollar[1].Expr.Loc().Start,
					End:      qlDollar[3].Expr.Loc().End,
				},
				Left:  qlDollar[1].Expr,
				Op:    qlDollar[2].Token,
				Right: qlDollar[3].Expr,
			}
		}
	case 30:
		qlDollar = qlS[qlpt-3 : qlpt+1]
//line ql.y:286
		{
			qlVAL.Expr = &BinaryExpr{
				Location: Location{
					Filename: qlDollar[1].Expr.Loc().Filename,
					Start:    qlDollar[1].Expr.Loc().Start,
					End:      qlDollar[3].Expr.Loc().End,
				},
				Left:  qlDollar[1].Expr,
				Op:    qlDollar[2].Token,
				Right: qlDollar[3].Expr,
			}
		}
	case 31:
		qlDollar = qlS[qlpt-3 : qlpt+1]
//line ql.y:298
		{
			qlVAL.Expr = &BinaryExpr{
				Location: Location{
					Filename: qlDollar[1].Expr.Loc().Filename,
					Start:    qlDollar[1].Expr.Loc().Start,
					End:      qlDollar[3].Expr.Loc().End,
				},
				Left:  qlDollar[1].Expr,
				Op:    qlDollar[2].Token,
				Right: qlDollar[3].Expr,
			}
		}
	case 32:
		qlDollar = qlS[qlpt-2 : qlpt+1]
//line ql.y:310
		{
			qlVAL.Expr = &UnaryExpr{
				Location: Location{
					Filename: qlDollar[1].Token.Loc().Filename,
					Start:    qlDollar[1].Token.Loc().Start,
					End:      qlDollar[2].Expr.Loc().End,
				},
				Op:         qlDollar[1].Token,
				Expression: qlDollar[2].Expr,
			}
		}
	case 33:
		qlDollar = qlS[qlpt-2 : qlpt+1]
//line ql.y:321
		{
			qlVAL.Expr = &UnaryExpr{
				Location: Location{
					Filename: qlDollar[1].Token.Loc().Filename,
					Start:    qlDollar[1].Token.Loc().Start,
					End:      qlDollar[2].Expr.Loc().End,
				},
				Op:         qlDollar[1].Token,
				Expression: qlDollar[2].Expr,
			}
		}
	case 34:
		qlDollar = qlS[qlpt-3 : qlpt+1]
//line ql.y:335
		{
		}
	case 35:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:341
		{
		}
	case 36:
		qlDollar = qlS[qlpt-3 : qlpt+1]
//line ql.y:343
		{
		}
	case 37:
		qlDollar = qlS[qlpt-3 : qlpt+1]
//line ql.y:345
		{
		}
	case 38:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:350
		{
		}
	case 39:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:352
		{
		}
	case 40:
		qlDollar = qlS[qlpt-0 : qlpt+1]
//line ql.y:357
		{ // empty
		}
	case 41:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:359
		{
		}
	case 42:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:364
		{
		}
	case 43:
		qlDollar = qlS[qlpt-3 : qlpt+1]
//line ql.y:366
		{
		}
	case 44:
		qlDollar = qlS[qlpt-4 : qlpt+1]
//line ql.y:371
		{
			qlVAL.AssignExpr = &AssignExpr{
				Location: Location{
					Filename: qlDollar[1].Token.Loc().Filename,
					Start:    qlDollar[1].Token.Loc().Start,
					End:      qlDollar[4].Expr.Loc().End,
				},
				Let:        qlDollar[1].Token,
				Name:       qlDollar[2].Token,
				Assign:     qlDollar[3].Token,
				Expression: qlDollar[4].Expr,
			}
		}
	}
	goto qlstack /* stack new state and value */
}
