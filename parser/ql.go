// Code generated by goyacc -o ql.go -v ql.output -p ql ql.y. DO NOT EDIT.

//line ql.y:2
package parser

import __yyfmt__ "fmt"

//line ql.y:2

//line ql.y:5
type qlSymType struct {
	yys int
	*Token

	// scoped control flow expressions
	*ScopeDef
	*ExprBlock
	*ConditionalExpr
	*ForExpr

	ControlFlowExpr
	Expr

	Statements []ControlFlowExpr
	Arguments  []*Argument

	TypeSpec
}

const LEX_ERROR = 57346
const BLOCK_COMMENT_END = 57347
const COMMENT = 57348
const L_BRACE = 57349
const R_BRACE = 57350
const L_PAREN = 57351
const R_PAREN = 57352
const L_BRACKET = 57353
const R_BRACKET = 57354
const ASSIGN = 57355
const COLON = 57356
const COMMA = 57357
const DOT = 57358
const STAR_STAR = 57359
const AT = 57360
const SEMICOLON = 57361
const NEWLINE = 57362
const LET = 57363
const IF = 57364
const ELSE = 57365
const FOR = 57366
const RETURN = 57367
const OR = 57368
const AND = 57369
const NOT = 57370
const LT = 57371
const GT = 57372
const EQ = 57373
const NE = 57374
const LE = 57375
const GE = 57376
const BITWISE_OR = 57377
const BITWISE_AND = 57378
const XOR = 57379
const L_SHIFT = 57380
const R_SHIFT = 57381
const ADD = 57382
const SUB = 57383
const MUL = 57384
const DIV = 57385
const MOD = 57386
const UNARY = 57387
const IDENT = 57388
const BYTE_LITERAL = 57389
const STRING_LITERAL = 57390
const INT_LITERAL = 57391
const FLOAT_LITERAL = 57392
const BOOL_LITERAL = 57393
const BOOL_TYPE = 57394
const INT_TYPE = 57395
const UINT_TYPE = 57396
const FLOAT_TYPE = 57397
const BYTE_TYPE = 57398
const STRING_TYPE = 57399
const NOOP = 57400

var qlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"BLOCK_COMMENT_END",
	"COMMENT",
	"L_BRACE",
	"R_BRACE",
	"L_PAREN",
	"R_PAREN",
	"L_BRACKET",
	"R_BRACKET",
	"ASSIGN",
	"COLON",
	"COMMA",
	"DOT",
	"STAR_STAR",
	"AT",
	"SEMICOLON",
	"NEWLINE",
	"LET",
	"IF",
	"ELSE",
	"FOR",
	"RETURN",
	"OR",
	"AND",
	"NOT",
	"LT",
	"GT",
	"EQ",
	"NE",
	"LE",
	"GE",
	"BITWISE_OR",
	"BITWISE_AND",
	"XOR",
	"L_SHIFT",
	"R_SHIFT",
	"ADD",
	"SUB",
	"MUL",
	"DIV",
	"MOD",
	"UNARY",
	"IDENT",
	"BYTE_LITERAL",
	"STRING_LITERAL",
	"INT_LITERAL",
	"FLOAT_LITERAL",
	"BOOL_LITERAL",
	"BOOL_TYPE",
	"INT_TYPE",
	"UINT_TYPE",
	"FLOAT_TYPE",
	"BYTE_TYPE",
	"STRING_TYPE",
	"NOOP",
}
var qlStatenames = [...]string{}

const qlEofCode = 1
const qlErrCode = 2
const qlInitialStackSize = 16

//line ql.y:666

//line yacctab:1
var qlExca = [...]int{
	-1, 0,
	1, 2,
	-2, 14,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	1, 3,
	8, 3,
	-2, 14,
	-1, 62,
	10, 58,
	-2, 14,
	-1, 69,
	8, 2,
	-2, 14,
}

const qlPrivate = 57344

const qlLast = 292

var qlAct = [...]int{

	13, 66, 67, 22, 34, 2, 10, 121, 19, 45,
	46, 47, 48, 49, 50, 51, 52, 53, 54, 63,
	64, 18, 101, 58, 100, 55, 60, 25, 26, 27,
	28, 29, 129, 31, 32, 33, 30, 124, 72, 73,
	74, 75, 76, 77, 78, 79, 80, 81, 82, 83,
	84, 85, 86, 87, 88, 89, 7, 8, 14, 90,
	56, 69, 16, 104, 99, 19, 105, 52, 53, 54,
	113, 107, 108, 110, 65, 106, 70, 57, 18, 69,
	7, 8, 56, 15, 25, 26, 27, 28, 29, 112,
	31, 32, 33, 30, 70, 9, 71, 109, 93, 94,
	95, 96, 97, 98, 62, 59, 115, 111, 69, 116,
	1, 61, 118, 120, 123, 19, 4, 122, 5, 125,
	35, 91, 12, 126, 120, 36, 128, 127, 18, 11,
	6, 131, 130, 60, 25, 26, 27, 28, 29, 119,
	31, 32, 33, 30, 68, 37, 38, 24, 39, 40,
	41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
	51, 52, 53, 54, 69, 121, 46, 47, 48, 49,
	50, 51, 52, 53, 54, 23, 103, 117, 50, 51,
	52, 53, 54, 37, 38, 102, 39, 40, 41, 42,
	43, 44, 45, 46, 47, 48, 49, 50, 51, 52,
	53, 54, 114, 47, 48, 49, 50, 51, 52, 53,
	54, 48, 49, 50, 51, 52, 53, 54, 37, 38,
	3, 39, 40, 41, 42, 43, 44, 45, 46, 47,
	48, 49, 50, 51, 52, 53, 54, 37, 38, 17,
	39, 40, 41, 42, 43, 44, 45, 46, 47, 48,
	49, 50, 51, 52, 53, 54, 38, 92, 39, 40,
	41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
	51, 52, 53, 54, 39, 40, 41, 42, 43, 44,
	45, 46, 47, 48, 49, 50, 51, 52, 53, 54,
	21, 20,
}
var qlPact = [...]int{

	37, -1000, -1000, 37, -1000, -1000, 61, -1000, -1000, -1000,
	-1000, -1000, -1000, 211, -21, 64, 87, 95, -20, -20,
	-1000, 65, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 72, -1000, -1000, -20, -20, -20,
	-20, -20, -20, -20, -20, -20, -20, -20, -20, -20,
	-20, -20, -20, -20, -20, 46, -1000, -20, -1000, -22,
	42, -24, -20, -1000, 245, -20, -1000, -1000, -1000, 37,
	-20, -20, 229, 245, -26, -26, -26, -26, -26, -26,
	130, 166, 173, 138, 138, 25, 25, -1000, -1000, -1000,
	-20, 60, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-20, -1000, 79, 55, 211, 192, 98, 157, 119, -1000,
	-20, -1000, -1000, -20, -1000, -1000, 14, 101, -1000, -39,
	101, 42, -1000, 211, 54, 9, -1000, -1000, -1000, 54,
	-1000, -1000,
}
var qlPgo = [...]int{

	0, 291, 290, 257, 6, 239, 0, 5, 220, 185,
	176, 4, 3, 1, 175, 2, 147, 144, 116, 130,
	129, 122, 121, 110, 118,
}
var qlR1 = [...]int{

	0, 23, 7, 7, 8, 8, 24, 24, 18, 18,
	19, 19, 19, 19, 11, 11, 3, 3, 3, 3,
	3, 3, 22, 12, 13, 14, 15, 15, 15, 15,
	15, 15, 16, 17, 17, 20, 20, 20, 21, 21,
	4, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	5, 5, 5, 5, 5, 5, 5, 5, 9, 9,
	10, 10, 6, 6, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
	6, 6, 6,
}
var qlR2 = [...]int{

	0, 1, 0, 1, 1, 2, 1, 1, 1, 2,
	1, 1, 1, 1, 0, 2, 1, 1, 1, 1,
	1, 1, 1, 2, 3, 2, 3, 4, 5, 6,
	5, 6, 2, 3, 4, 4, 5, 3, 2, 4,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 1, 1, 1, 3, 4, 0, 1,
	1, 3, 1, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 2,
}
var qlChk = [...]int{

	-1000, -23, -7, -8, -18, -24, -19, 19, 20, 58,
	-4, -20, -21, -6, 21, 46, 25, -5, 41, 28,
	-1, -2, -12, -14, -16, 47, 48, 49, 50, 51,
	56, 53, 54, 55, -11, -18, -24, 26, 27, 29,
	30, 31, 32, 33, 34, 35, 36, 37, 38, 39,
	40, 41, 42, 43, 44, 46, 18, 13, -4, 18,
	46, 16, 9, -6, -6, 9, -13, -15, -17, 7,
	22, 24, -6, -6, -6, -6, -6, -6, -6, -6,
	-6, -6, -6, -6, -6, -6, -6, -6, -6, -6,
	13, -22, -3, 52, 53, 54, 55, 56, 57, -4,
	46, 46, -9, -10, -6, -6, -7, -6, -6, -4,
	13, -4, 10, 15, 10, 8, -13, 20, -12, 20,
	-11, 46, -4, -6, 23, -13, -12, -15, -13, 23,
	-15, -13,
}
var qlDef = [...]int{

	-2, -2, 1, -2, 4, 8, 0, 6, 7, 10,
	11, 12, 13, 40, 0, 50, 14, 62, 14, 14,
	51, 0, 53, 54, 55, 41, 42, 43, 44, 45,
	46, 47, 48, 49, 0, 5, 9, 14, 14, 14,
	14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
	14, 14, 14, 14, 14, 0, 15, 14, 38, 0,
	50, 0, -2, 81, 82, 14, 23, 25, 32, -2,
	14, 14, 63, 64, 65, 66, 67, 68, 69, 70,
	71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
	14, 0, 22, 16, 17, 18, 19, 20, 21, 37,
	14, 56, 0, 59, 60, 0, 0, 0, 14, 35,
	14, 39, 57, 14, 52, 24, 26, 0, 33, 14,
	0, 0, 36, 61, 0, 27, 34, 28, 30, 0,
	29, 31,
}
var qlTok1 = [...]int{

	1,
}
var qlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58,
}
var qlTok3 = [...]int{
	0,
}

var qlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	qlDebug        = 0
	qlErrorVerbose = false
)

type qlLexer interface {
	Lex(lval *qlSymType) int
	Error(s string)
}

type qlParser interface {
	Parse(qlLexer) int
	Lookahead() int
}

type qlParserImpl struct {
	lval  qlSymType
	stack [qlInitialStackSize]qlSymType
	char  int
}

func (p *qlParserImpl) Lookahead() int {
	return p.char
}

func qlNewParser() qlParser {
	return &qlParserImpl{}
}

const qlFlag = -1000

func qlTokname(c int) string {
	if c >= 1 && c-1 < len(qlToknames) {
		if qlToknames[c-1] != "" {
			return qlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func qlStatname(s int) string {
	if s >= 0 && s < len(qlStatenames) {
		if qlStatenames[s] != "" {
			return qlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func qlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !qlErrorVerbose {
		return "syntax error"
	}

	for _, e := range qlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + qlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := qlPact[state]
	for tok := TOKSTART; tok-1 < len(qlToknames); tok++ {
		if n := base + tok; n >= 0 && n < qlLast && qlChk[qlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if qlDef[state] == -2 {
		i := 0
		for qlExca[i] != -1 || qlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; qlExca[i] >= 0; i += 2 {
			tok := qlExca[i]
			if tok < TOKSTART || qlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if qlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += qlTokname(tok)
	}
	return res
}

func qllex1(lex qlLexer, lval *qlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = qlTok1[0]
		goto out
	}
	if char < len(qlTok1) {
		token = qlTok1[char]
		goto out
	}
	if char >= qlPrivate {
		if char < qlPrivate+len(qlTok2) {
			token = qlTok2[char-qlPrivate]
			goto out
		}
	}
	for i := 0; i < len(qlTok3); i += 2 {
		token = qlTok3[i+0]
		if token == char {
			token = qlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = qlTok2[1] /* unknown char */
	}
	if qlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", qlTokname(token), uint(char))
	}
	return char, token
}

func qlParse(qllex qlLexer) int {
	return qlNewParser().Parse(qllex)
}

func (qlrcvr *qlParserImpl) Parse(qllex qlLexer) int {
	var qln int
	var qlVAL qlSymType
	var qlDollar []qlSymType
	_ = qlDollar // silence set and not used
	qlS := qlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	qlstate := 0
	qlrcvr.char = -1
	qltoken := -1 // qlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		qlstate = -1
		qlrcvr.char = -1
		qltoken = -1
	}()
	qlp := -1
	goto qlstack

ret0:
	return 0

ret1:
	return 1

qlstack:
	/* put a state and value onto the stack */
	if qlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", qlTokname(qltoken), qlStatname(qlstate))
	}

	qlp++
	if qlp >= len(qlS) {
		nyys := make([]qlSymType, len(qlS)*2)
		copy(nyys, qlS)
		qlS = nyys
	}
	qlS[qlp] = qlVAL
	qlS[qlp].yys = qlstate

qlnewstate:
	qln = qlPact[qlstate]
	if qln <= qlFlag {
		goto qldefault /* simple state */
	}
	if qlrcvr.char < 0 {
		qlrcvr.char, qltoken = qllex1(qllex, &qlrcvr.lval)
	}
	qln += qltoken
	if qln < 0 || qln >= qlLast {
		goto qldefault
	}
	qln = qlAct[qln]
	if qlChk[qln] == qltoken { /* valid shift */
		qlrcvr.char = -1
		qltoken = -1
		qlVAL = qlrcvr.lval
		qlstate = qln
		if Errflag > 0 {
			Errflag--
		}
		goto qlstack
	}

qldefault:
	/* default state action */
	qln = qlDef[qlstate]
	if qln == -2 {
		if qlrcvr.char < 0 {
			qlrcvr.char, qltoken = qllex1(qllex, &qlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if qlExca[xi+0] == -1 && qlExca[xi+1] == qlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			qln = qlExca[xi+0]
			if qln < 0 || qln == qltoken {
				break
			}
		}
		qln = qlExca[xi+1]
		if qln < 0 {
			goto ret0
		}
	}
	if qln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			qllex.Error(qlErrorMessage(qlstate, qltoken))
			Nerrs++
			if qlDebug >= 1 {
				__yyfmt__.Printf("%s", qlStatname(qlstate))
				__yyfmt__.Printf(" saw %s\n", qlTokname(qltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for qlp >= 0 {
				qln = qlPact[qlS[qlp].yys] + qlErrCode
				if qln >= 0 && qln < qlLast {
					qlstate = qlAct[qln] /* simulate a shift of "error" */
					if qlChk[qlstate] == qlErrCode {
						goto qlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if qlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", qlS[qlp].yys)
				}
				qlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if qlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", qlTokname(qltoken))
			}
			if qltoken == qlEofCode {
				goto ret1
			}
			qlrcvr.char = -1
			qltoken = -1
			goto qlnewstate /* try again in the same state */
		}
	}

	/* reduction by production qln */
	if qlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", qln, qlStatname(qlstate))
	}

	qlnt := qln
	qlpt := qlp
	_ = qlpt // guard against "declared and not used"

	qlp -= qlR2[qln]
	// qlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if qlp+1 >= len(qlS) {
		nyys := make([]qlSymType, len(qlS)*2)
		copy(nyys, qlS)
		qlS = nyys
	}
	qlVAL = qlS[qlp+1]

	/* consult goto table to find next state */
	qln = qlR1[qln]
	qlg := qlPgo[qln]
	qlj := qlg + qlS[qlp].yys + 1

	if qlj >= qlLast {
		qlstate = qlAct[qlg]
	} else {
		qlstate = qlAct[qlj]
		if qlChk[qlstate] != -qln {
			qlstate = qlAct[qlg]
		}
	}
	// dummy call; replaced with literal code
	switch qlnt {

	case 1:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:98
		{
			nodes := make([]Node, 0, len(qlDollar[1].Statements))
			for _, node := range qlDollar[1].Statements {
				nodes = append(nodes, node)
			}
			qllex.(*parseContext).setParsed(nodes)
		}
	case 2:
		qlDollar = qlS[qlpt-0 : qlpt+1]
//line ql.y:108
		{
			qlVAL.Statements = nil
		}
	case 3:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:112
		{
			qlVAL.Statements = qlDollar[1].Statements
		}
	case 4:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:118
		{
			if qlDollar[1].ControlFlowExpr != nil {
				qlVAL.Statements = append(qlVAL.Statements, qlDollar[1].ControlFlowExpr)
			}
		}
	case 5:
		qlDollar = qlS[qlpt-2 : qlpt+1]
//line ql.y:123
		{
			if qlDollar[2].ControlFlowExpr != nil {
				qlVAL.Statements = append(qlDollar[1].Statements, qlDollar[2].ControlFlowExpr)
			}
		}
	case 6:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:131
		{
			// do nothing
		}
	case 7:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:134
		{
			// do nothing
		}
	case 8:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:140
		{
			qlVAL.ControlFlowExpr = nil
		}
	case 9:
		qlDollar = qlS[qlpt-2 : qlpt+1]
//line ql.y:143
		{
			qlVAL.ControlFlowExpr = qlDollar[1].ControlFlowExpr
		}
	case 10:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:149
		{
			qlVAL.ControlFlowExpr = &Noop{
				Location: qlDollar[1].Token.Location,
				Value:    qlDollar[1].Token,
			}
		}
	case 11:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:155
		{
			qlVAL.ControlFlowExpr = &EvalExpr{
				Location:   qlDollar[1].Expr.Loc(),
				Expression: qlDollar[1].Expr,
			}
		}
	case 12:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:161
		{
			qlVAL.ControlFlowExpr = qlDollar[1].ControlFlowExpr
		}
	case 13:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:164
		{
			qlVAL.ControlFlowExpr = qlDollar[1].ControlFlowExpr
		}
	case 14:
		qlDollar = qlS[qlpt-0 : qlpt+1]
//line ql.y:170
		{
			qlVAL.ScopeDef = nil
		}
	case 15:
		qlDollar = qlS[qlpt-2 : qlpt+1]
//line ql.y:173
		{
			qlVAL.ScopeDef = &ScopeDef{
				Location: qlDollar[1].Token.Location.Merge(qlDollar[2].Token.Location),
				Name:     qlDollar[1].Token,
				At:       qlDollar[2].Token,
			}
		}
	case 16:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:183
		{
			qlVAL.Token = qlDollar[1].Token
		}
	case 17:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:186
		{
			qlVAL.Token = qlDollar[1].Token
		}
	case 18:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:189
		{
			qlVAL.Token = qlDollar[1].Token
		}
	case 19:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:192
		{
			qlVAL.Token = qlDollar[1].Token
		}
	case 20:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:195
		{
			qlVAL.Token = qlDollar[1].Token
		}
	case 21:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:198
		{
			qlVAL.Token = qlDollar[1].Token
		}
	case 22:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:204
		{
			qlVAL.TypeSpec = &ScalarType{
				Location: qlDollar[1].Token.Loc(),
				Type:     qlDollar[1].Token,
			}
		}
	case 23:
		qlDollar = qlS[qlpt-2 : qlpt+1]
//line ql.y:213
		{
			qlVAL.ExprBlock = qlDollar[2].ExprBlock
			if qlDollar[1].ScopeDef != nil {
				qlVAL.ExprBlock.Location = qlDollar[1].ScopeDef.Location.Merge(qlDollar[2].ExprBlock.Location)
				qlVAL.ExprBlock.ScopeDef = qlDollar[1].ScopeDef
			}
		}
	case 24:
		qlDollar = qlS[qlpt-3 : qlpt+1]
//line ql.y:223
		{
			qlVAL.ExprBlock = &ExprBlock{
				Location:   qlDollar[1].Token.Loc().Merge(qlDollar[3].Token.Loc()),
				LBrace:     qlDollar[1].Token,
				Statements: qlDollar[2].Statements,
				RBrace:     qlDollar[3].Token,
			}
		}
	case 25:
		qlDollar = qlS[qlpt-2 : qlpt+1]
//line ql.y:234
		{
			qlVAL.ConditionalExpr = qlDollar[2].ConditionalExpr
			if qlDollar[1].ScopeDef != nil {
				qlVAL.ConditionalExpr.Location = qlDollar[1].ScopeDef.Location.Merge(qlDollar[2].ConditionalExpr.Location)
				qlVAL.ConditionalExpr.ScopeDef = qlDollar[1].ScopeDef
			}
		}
	case 26:
		qlDollar = qlS[qlpt-3 : qlpt+1]
//line ql.y:244
		{
			qlVAL.ConditionalExpr = &ConditionalExpr{
				Location:   qlDollar[1].Token.Loc().Merge(qlDollar[3].ExprBlock.Loc()),
				If:         qlDollar[1].Token,
				Predicate:  qlDollar[2].Expr,
				TrueClause: qlDollar[3].ExprBlock,
			}
		}
	case 27:
		qlDollar = qlS[qlpt-4 : qlpt+1]
//line ql.y:252
		{
			qlVAL.ConditionalExpr = &ConditionalExpr{
				Location:   qlDollar[1].Token.Loc().Merge(qlDollar[4].ExprBlock.Loc()),
				If:         qlDollar[1].Token,
				Predicate:  qlDollar[2].Expr,
				TrueClause: qlDollar[4].ExprBlock,
			}
		}
	case 28:
		qlDollar = qlS[qlpt-5 : qlpt+1]
//line ql.y:260
		{
			qlVAL.ConditionalExpr = &ConditionalExpr{
				Location:    qlDollar[1].Token.Loc().Merge(qlDollar[5].ConditionalExpr.Loc()),
				If:          qlDollar[1].Token,
				Predicate:   qlDollar[2].Expr,
				TrueClause:  qlDollar[3].ExprBlock,
				Else:        qlDollar[4].Token,
				FalseClause: qlDollar[5].ConditionalExpr,
			}
		}
	case 29:
		qlDollar = qlS[qlpt-6 : qlpt+1]
//line ql.y:270
		{
			qlVAL.ConditionalExpr = &ConditionalExpr{
				Location:    qlDollar[1].Token.Loc().Merge(qlDollar[6].ConditionalExpr.Loc()),
				If:          qlDollar[1].Token,
				Predicate:   qlDollar[2].Expr,
				TrueClause:  qlDollar[4].ExprBlock,
				Else:        qlDollar[5].Token,
				FalseClause: qlDollar[6].ConditionalExpr,
			}
		}
	case 30:
		qlDollar = qlS[qlpt-5 : qlpt+1]
//line ql.y:280
		{
			qlVAL.ConditionalExpr = &ConditionalExpr{
				Location:    qlDollar[1].Token.Loc().Merge(qlDollar[5].ExprBlock.Loc()),
				If:          qlDollar[1].Token,
				Predicate:   qlDollar[2].Expr,
				TrueClause:  qlDollar[3].ExprBlock,
				Else:        qlDollar[4].Token,
				FalseClause: qlDollar[5].ExprBlock,
			}
		}
	case 31:
		qlDollar = qlS[qlpt-6 : qlpt+1]
//line ql.y:290
		{
			qlVAL.ConditionalExpr = &ConditionalExpr{
				Location:    qlDollar[1].Token.Loc().Merge(qlDollar[6].ExprBlock.Loc()),
				If:          qlDollar[1].Token,
				Predicate:   qlDollar[2].Expr,
				TrueClause:  qlDollar[4].ExprBlock,
				Else:        qlDollar[5].Token,
				FalseClause: qlDollar[6].ExprBlock,
			}
		}
	case 32:
		qlDollar = qlS[qlpt-2 : qlpt+1]
//line ql.y:303
		{
			qlVAL.ForExpr = qlDollar[2].ForExpr
			if qlDollar[1].ScopeDef != nil {
				qlVAL.ForExpr.Location = qlDollar[1].ScopeDef.Location.Merge(qlDollar[2].ForExpr.Location)
				qlVAL.ForExpr.ScopeDef = qlDollar[1].ScopeDef
			}
		}
	case 33:
		qlDollar = qlS[qlpt-3 : qlpt+1]
//line ql.y:313
		{
			qlVAL.ForExpr = &ForExpr{
				Location:  qlDollar[1].Token.Location.Merge(qlDollar[3].ExprBlock.Location),
				For:       qlDollar[1].Token,
				Predicate: qlDollar[2].Expr,
				Body:      qlDollar[3].ExprBlock,
			}
		}
	case 34:
		qlDollar = qlS[qlpt-4 : qlpt+1]
//line ql.y:321
		{
			qlVAL.ForExpr = &ForExpr{
				Location:  qlDollar[1].Token.Location.Merge(qlDollar[4].ExprBlock.Location),
				For:       qlDollar[1].Token,
				Predicate: qlDollar[2].Expr,
				Body:      qlDollar[4].ExprBlock,
			}
		}
	case 35:
		qlDollar = qlS[qlpt-4 : qlpt+1]
//line ql.y:332
		{
			qlVAL.ControlFlowExpr = &AssignExpr{
				Location:   qlDollar[1].Token.Loc().Merge(qlDollar[4].Expr.Loc()),
				Let:        qlDollar[1].Token,
				Name:       qlDollar[2].Token,
				Assign:     qlDollar[3].Token,
				Expression: qlDollar[4].Expr,
			}
		}
	case 36:
		qlDollar = qlS[qlpt-5 : qlpt+1]
//line ql.y:342
		{
			qlVAL.ControlFlowExpr = &AssignExpr{
				Location:   qlDollar[1].Token.Loc().Merge(qlDollar[5].Expr.Loc()),
				Let:        qlDollar[1].Token,
				Name:       qlDollar[2].Token,
				TypeSpec:   qlDollar[3].TypeSpec,
				Assign:     qlDollar[4].Token,
				Expression: qlDollar[5].Expr,
			}
		}
	case 37:
		qlDollar = qlS[qlpt-3 : qlpt+1]
//line ql.y:353
		{
			qlVAL.ControlFlowExpr = &AssignExpr{
				Location:   qlDollar[1].Token.Loc().Merge(qlDollar[3].Expr.Loc()),
				Name:       qlDollar[1].Token,
				Assign:     qlDollar[2].Token,
				Expression: qlDollar[3].Expr,
			}
		}
	case 38:
		qlDollar = qlS[qlpt-2 : qlpt+1]
//line ql.y:364
		{
			qlVAL.ControlFlowExpr = &ReturnExpr{
				Location:   qlDollar[1].Token.Loc().Merge(qlDollar[2].Expr.Loc()),
				Return:     qlDollar[1].Token,
				Expression: qlDollar[2].Expr,
			}
		}
	case 39:
		qlDollar = qlS[qlpt-4 : qlpt+1]
//line ql.y:371
		{
			qlVAL.ControlFlowExpr = &ReturnExpr{
				Location:   qlDollar[1].Token.Loc().Merge(qlDollar[4].Expr.Loc()),
				Return:     qlDollar[1].Token,
				At:         qlDollar[2].Token,
				Label:      qlDollar[3].Token,
				Expression: qlDollar[4].Expr,
			}
		}
	case 40:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:383
		{
			qlVAL.Expr = qlDollar[1].Expr
		}
	case 41:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:389
		{
			qlVAL.Token = qlDollar[1].Token
		}
	case 42:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:392
		{
			qlVAL.Token = qlDollar[1].Token
		}
	case 43:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:395
		{
			qlVAL.Token = qlDollar[1].Token
		}
	case 44:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:398
		{
			qlVAL.Token = qlDollar[1].Token
		}
	case 45:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:401
		{
			qlVAL.Token = qlDollar[1].Token
		}
	case 46:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:407
		{
			qlVAL.Token = qlDollar[1].Token
		}
	case 47:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:410
		{
			qlVAL.Token = qlDollar[1].Token
		}
	case 48:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:413
		{
			qlVAL.Token = qlDollar[1].Token
		}
	case 49:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:416
		{
			qlVAL.Token = qlDollar[1].Token
		}
	case 50:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:423
		{
			qlVAL.Expr = &Identifier{
				Location: qlDollar[1].Token.Location,
				Value:    qlDollar[1].Token,
			}
		}
	case 51:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:429
		{
			qlVAL.Expr = &Literal{
				Location: qlDollar[1].Token.Location,
				Value:    qlDollar[1].Token,
			}
		}
	case 52:
		qlDollar = qlS[qlpt-4 : qlpt+1]
//line ql.y:435
		{
			qlVAL.Expr = &TypeConversion{
				Location:   qlDollar[1].Token.Loc().Merge(qlDollar[4].Token.Loc()),
				Type:       qlDollar[1].Token,
				LParen:     qlDollar[2].Token,
				Expression: qlDollar[3].Expr,
				RParen:     qlDollar[4].Token,
			}
		}
	case 53:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:444
		{
			qlVAL.Expr = qlDollar[1].ExprBlock
		}
	case 54:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:447
		{
			qlVAL.Expr = qlDollar[1].ConditionalExpr
		}
	case 55:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:450
		{
			qlVAL.Expr = qlDollar[1].ForExpr
		}
	case 56:
		qlDollar = qlS[qlpt-3 : qlpt+1]
//line ql.y:453
		{
			qlVAL.Expr = &Accessor{
				Location:    qlDollar[1].Expr.Loc().Merge(qlDollar[3].Token.Loc()),
				PrimaryExpr: qlDollar[1].Expr,
				Dot:         qlDollar[2].Token,
				Name:        qlDollar[3].Token,
			}
		}
	case 57:
		qlDollar = qlS[qlpt-4 : qlpt+1]
//line ql.y:461
		{
			qlVAL.Expr = &Invocation{
				Location:   qlDollar[1].Expr.Loc().Merge(qlDollar[4].Token.Loc()),
				Expression: qlDollar[1].Expr,
				LParen:     qlDollar[2].Token,
				Arguments:  qlDollar[3].Arguments,
				RParen:     qlDollar[4].Token,
			}
		}
	case 58:
		qlDollar = qlS[qlpt-0 : qlpt+1]
//line ql.y:473
		{ // empty
			qlVAL.Arguments = nil
		}
	case 59:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:476
		{
			qlVAL.Arguments = qlDollar[1].Arguments
		}
	case 60:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:482
		{
			qlVAL.Arguments = []*Argument{
				&Argument{
					Location:   qlDollar[1].Expr.Loc(),
					Expression: qlDollar[1].Expr,
				},
			}
		}
	case 61:
		qlDollar = qlS[qlpt-3 : qlpt+1]
//line ql.y:490
		{
			qlDollar[1].Arguments[len(qlDollar[1].Arguments)-1].Location = qlDollar[1].Arguments[len(qlDollar[1].Arguments)-1].Location.Merge(qlDollar[2].Token.Loc())
			qlDollar[1].Arguments[len(qlDollar[1].Arguments)-1].Comma = qlDollar[2].Token
			qlVAL.Arguments = append(qlDollar[1].Arguments,
				&Argument{
					Location:   qlDollar[3].Expr.Loc(),
					Expression: qlDollar[3].Expr,
				})
		}
	case 62:
		qlDollar = qlS[qlpt-1 : qlpt+1]
//line ql.y:503
		{
			qlVAL.Expr = qlDollar[1].Expr
		}
	case 63:
		qlDollar = qlS[qlpt-3 : qlpt+1]
//line ql.y:506
		{
			qlVAL.Expr = &BinaryExpr{
				Location: qlDollar[1].Expr.Loc().Merge(qlDollar[3].Expr.Loc()),
				Left:     qlDollar[1].Expr,
				Op:       qlDollar[2].Token,
				Right:    qlDollar[3].Expr,
			}
		}
	case 64:
		qlDollar = qlS[qlpt-3 : qlpt+1]
//line ql.y:514
		{
			qlVAL.Expr = &BinaryExpr{
				Location: qlDollar[1].Expr.Loc().Merge(qlDollar[3].Expr.Loc()),
				Left:     qlDollar[1].Expr,
				Op:       qlDollar[2].Token,
				Right:    qlDollar[3].Expr,
			}
		}
	case 65:
		qlDollar = qlS[qlpt-3 : qlpt+1]
//line ql.y:522
		{
			qlVAL.Expr = &BinaryExpr{
				Location: qlDollar[1].Expr.Loc().Merge(qlDollar[3].Expr.Loc()),
				Left:     qlDollar[1].Expr,
				Op:       qlDollar[2].Token,
				Right:    qlDollar[3].Expr,
			}
		}
	case 66:
		qlDollar = qlS[qlpt-3 : qlpt+1]
//line ql.y:530
		{
			qlVAL.Expr = &BinaryExpr{
				Location: qlDollar[1].Expr.Loc().Merge(qlDollar[3].Expr.Loc()),
				Left:     qlDollar[1].Expr,
				Op:       qlDollar[2].Token,
				Right:    qlDollar[3].Expr,
			}
		}
	case 67:
		qlDollar = qlS[qlpt-3 : qlpt+1]
//line ql.y:538
		{
			qlVAL.Expr = &BinaryExpr{
				Location: qlDollar[1].Expr.Loc().Merge(qlDollar[3].Expr.Loc()),
				Left:     qlDollar[1].Expr,
				Op:       qlDollar[2].Token,
				Right:    qlDollar[3].Expr,
			}
		}
	case 68:
		qlDollar = qlS[qlpt-3 : qlpt+1]
//line ql.y:546
		{
			qlVAL.Expr = &BinaryExpr{
				Location: qlDollar[1].Expr.Loc().Merge(qlDollar[3].Expr.Loc()),
				Left:     qlDollar[1].Expr,
				Op:       qlDollar[2].Token,
				Right:    qlDollar[3].Expr,
			}
		}
	case 69:
		qlDollar = qlS[qlpt-3 : qlpt+1]
//line ql.y:554
		{
			qlVAL.Expr = &BinaryExpr{
				Location: qlDollar[1].Expr.Loc().Merge(qlDollar[3].Expr.Loc()),
				Left:     qlDollar[1].Expr,
				Op:       qlDollar[2].Token,
				Right:    qlDollar[3].Expr,
			}
		}
	case 70:
		qlDollar = qlS[qlpt-3 : qlpt+1]
//line ql.y:562
		{
			qlVAL.Expr = &BinaryExpr{
				Location: qlDollar[1].Expr.Loc().Merge(qlDollar[3].Expr.Loc()),
				Left:     qlDollar[1].Expr,
				Op:       qlDollar[2].Token,
				Right:    qlDollar[3].Expr,
			}
		}
	case 71:
		qlDollar = qlS[qlpt-3 : qlpt+1]
//line ql.y:570
		{
			qlVAL.Expr = &BinaryExpr{
				Location: qlDollar[1].Expr.Loc().Merge(qlDollar[3].Expr.Loc()),
				Left:     qlDollar[1].Expr,
				Op:       qlDollar[2].Token,
				Right:    qlDollar[3].Expr,
			}
		}
	case 72:
		qlDollar = qlS[qlpt-3 : qlpt+1]
//line ql.y:578
		{
			qlVAL.Expr = &BinaryExpr{
				Location: qlDollar[1].Expr.Loc().Merge(qlDollar[3].Expr.Loc()),
				Left:     qlDollar[1].Expr,
				Op:       qlDollar[2].Token,
				Right:    qlDollar[3].Expr,
			}
		}
	case 73:
		qlDollar = qlS[qlpt-3 : qlpt+1]
//line ql.y:586
		{
			qlVAL.Expr = &BinaryExpr{
				Location: qlDollar[1].Expr.Loc().Merge(qlDollar[3].Expr.Loc()),
				Left:     qlDollar[1].Expr,
				Op:       qlDollar[2].Token,
				Right:    qlDollar[3].Expr,
			}
		}
	case 74:
		qlDollar = qlS[qlpt-3 : qlpt+1]
//line ql.y:594
		{
			qlVAL.Expr = &BinaryExpr{
				Location: qlDollar[1].Expr.Loc().Merge(qlDollar[3].Expr.Loc()),
				Left:     qlDollar[1].Expr,
				Op:       qlDollar[2].Token,
				Right:    qlDollar[3].Expr,
			}
		}
	case 75:
		qlDollar = qlS[qlpt-3 : qlpt+1]
//line ql.y:602
		{
			qlVAL.Expr = &BinaryExpr{
				Location: qlDollar[1].Expr.Loc().Merge(qlDollar[3].Expr.Loc()),
				Left:     qlDollar[1].Expr,
				Op:       qlDollar[2].Token,
				Right:    qlDollar[3].Expr,
			}
		}
	case 76:
		qlDollar = qlS[qlpt-3 : qlpt+1]
//line ql.y:610
		{
			qlVAL.Expr = &BinaryExpr{
				Location: qlDollar[1].Expr.Loc().Merge(qlDollar[3].Expr.Loc()),
				Left:     qlDollar[1].Expr,
				Op:       qlDollar[2].Token,
				Right:    qlDollar[3].Expr,
			}
		}
	case 77:
		qlDollar = qlS[qlpt-3 : qlpt+1]
//line ql.y:618
		{
			qlVAL.Expr = &BinaryExpr{
				Location: qlDollar[1].Expr.Loc().Merge(qlDollar[3].Expr.Loc()),
				Left:     qlDollar[1].Expr,
				Op:       qlDollar[2].Token,
				Right:    qlDollar[3].Expr,
			}
		}
	case 78:
		qlDollar = qlS[qlpt-3 : qlpt+1]
//line ql.y:626
		{
			qlVAL.Expr = &BinaryExpr{
				Location: qlDollar[1].Expr.Loc().Merge(qlDollar[3].Expr.Loc()),
				Left:     qlDollar[1].Expr,
				Op:       qlDollar[2].Token,
				Right:    qlDollar[3].Expr,
			}
		}
	case 79:
		qlDollar = qlS[qlpt-3 : qlpt+1]
//line ql.y:634
		{
			qlVAL.Expr = &BinaryExpr{
				Location: qlDollar[1].Expr.Loc().Merge(qlDollar[3].Expr.Loc()),
				Left:     qlDollar[1].Expr,
				Op:       qlDollar[2].Token,
				Right:    qlDollar[3].Expr,
			}
		}
	case 80:
		qlDollar = qlS[qlpt-3 : qlpt+1]
//line ql.y:642
		{
			qlVAL.Expr = &BinaryExpr{
				Location: qlDollar[1].Expr.Loc().Merge(qlDollar[3].Expr.Loc()),
				Left:     qlDollar[1].Expr,
				Op:       qlDollar[2].Token,
				Right:    qlDollar[3].Expr,
			}
		}
	case 81:
		qlDollar = qlS[qlpt-2 : qlpt+1]
//line ql.y:650
		{
			qlVAL.Expr = &UnaryExpr{
				Location:   qlDollar[1].Token.Loc().Merge(qlDollar[2].Expr.Loc()),
				Op:         qlDollar[1].Token,
				Expression: qlDollar[2].Expr,
			}
		}
	case 82:
		qlDollar = qlS[qlpt-2 : qlpt+1]
//line ql.y:657
		{
			qlVAL.Expr = &UnaryExpr{
				Location:   qlDollar[1].Token.Loc().Merge(qlDollar[2].Expr.Loc()),
				Op:         qlDollar[1].Token,
				Expression: qlDollar[2].Expr,
			}
		}
	}
	goto qlstack /* stack new state and value */
}
